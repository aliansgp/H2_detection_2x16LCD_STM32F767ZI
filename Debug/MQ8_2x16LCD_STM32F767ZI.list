
MQ8_2x16LCD_STM32F767ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036dc  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002170  080038d8  080038d8  000138d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a48  08005a48  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08005a48  08005a48  00015a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a50  08005a50  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a50  08005a50  00015a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a54  08005a54  00015a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005a58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000080  08005ad8  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08005ad8  00020184  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca69  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f6e  00000000  00000000  0002cb17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  0002ea88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af0  00000000  00000000  0002f680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027e43  00000000  00000000  00030170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e3cc  00000000  00000000  00057fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa741  00000000  00000000  0006637f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00160ac0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003394  00000000  00000000  00160b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000080 	.word	0x20000080
 8000214:	00000000 	.word	0x00000000
 8000218:	080038bc 	.word	0x080038bc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000084 	.word	0x20000084
 8000234:	080038bc 	.word	0x080038bc

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <LCD_delay>:
#include "gpio.h"
#include "tim.h"
extern TIM_HandleTypeDef timer;


void LCD_delay(uint32_t us){
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(&htim1);
 8000544:	4809      	ldr	r0, [pc, #36]	; (800056c <LCD_delay+0x30>)
 8000546:	f002 fa95 	bl	8002a74 <HAL_TIM_Base_Start>
	htim1.Instance->CNT=0;
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <LCD_delay+0x30>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2200      	movs	r2, #0
 8000550:	625a      	str	r2, [r3, #36]	; 0x24
	while(htim1.Instance->CNT < us);
 8000552:	bf00      	nop
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <LCD_delay+0x30>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	429a      	cmp	r2, r3
 800055e:	d8f9      	bhi.n	8000554 <LCD_delay+0x18>

}
 8000560:	bf00      	nop
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	200000e8 	.word	0x200000e8

08000570 <LCD_init>:


void LCD_init(){
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0

	LCD_send_cmd(0x02);		// To initialize LCD in 4-bit mode.
 8000574:	2002      	movs	r0, #2
 8000576:	f000 f837 	bl	80005e8 <LCD_send_cmd>
	HAL_Delay(3);
 800057a:	2003      	movs	r0, #3
 800057c:	f000 fdd2 	bl	8001124 <HAL_Delay>
	LCD_send_cmd(0x28);		// To initialize LCD in 2 lines, 5x7 dots and 4bit mode.
 8000580:	2028      	movs	r0, #40	; 0x28
 8000582:	f000 f831 	bl	80005e8 <LCD_send_cmd>
	HAL_Delay(2);
 8000586:	2002      	movs	r0, #2
 8000588:	f000 fdcc 	bl	8001124 <HAL_Delay>
	LCD_send_cmd(0x0C);
 800058c:	200c      	movs	r0, #12
 800058e:	f000 f82b 	bl	80005e8 <LCD_send_cmd>
	HAL_Delay(2);
 8000592:	2002      	movs	r0, #2
 8000594:	f000 fdc6 	bl	8001124 <HAL_Delay>
	LCD_send_cmd(0x06);
 8000598:	2006      	movs	r0, #6
 800059a:	f000 f825 	bl	80005e8 <LCD_send_cmd>
	HAL_Delay(2);
 800059e:	2002      	movs	r0, #2
 80005a0:	f000 fdc0 	bl	8001124 <HAL_Delay>
	LCD_send_cmd(0x80);
 80005a4:	2080      	movs	r0, #128	; 0x80
 80005a6:	f000 f81f 	bl	80005e8 <LCD_send_cmd>
	HAL_Delay(2);
 80005aa:	2002      	movs	r0, #2
 80005ac:	f000 fdba 	bl	8001124 <HAL_Delay>
//    LCD_send_cmd(0x00);
//    LCD_send_cmd(0x06);
//    LCD_send_cmd(0x00);
//    LCD_send_cmd(0x01);

}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <LCD_send_data>:


void LCD_send_data(char data){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]

	char datatosend;
	datatosend = ((data>>4)&0x0f);
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	091b      	lsrs	r3, r3, #4
 80005c2:	73fb      	strb	r3, [r7, #15]
	LCD_send(datatosend, 1);
 80005c4:	7bfb      	ldrb	r3, [r7, #15]
 80005c6:	2101      	movs	r1, #1
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 f827 	bl	800061c <LCD_send>
	datatosend = ((data)&0x0f);
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	f003 030f 	and.w	r3, r3, #15
 80005d4:	73fb      	strb	r3, [r7, #15]
	LCD_send(datatosend, 1);
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	2101      	movs	r1, #1
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 f81e 	bl	800061c <LCD_send>
}
 80005e0:	bf00      	nop
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <LCD_send_cmd>:


void LCD_send_cmd(char cmd){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]

    char datatosend;
    datatosend = ((cmd>>4)&0x0f);
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	091b      	lsrs	r3, r3, #4
 80005f6:	73fb      	strb	r3, [r7, #15]
    LCD_send(datatosend,0);
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f80d 	bl	800061c <LCD_send>
    datatosend = ((cmd)&0x0f);
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	f003 030f 	and.w	r3, r3, #15
 8000608:	73fb      	strb	r3, [r7, #15]
    LCD_send(datatosend, 0);
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f000 f804 	bl	800061c <LCD_send>

}
 8000614:	bf00      	nop
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <LCD_send>:


void LCD_send(char data, int rs){
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	6039      	str	r1, [r7, #0]
 8000626:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(GPIOA, RS_Pin, rs);
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	b2db      	uxtb	r3, r3
 800062c:	461a      	mov	r2, r3
 800062e:	2180      	movs	r1, #128	; 0x80
 8000630:	481e      	ldr	r0, [pc, #120]	; (80006ac <LCD_send+0x90>)
 8000632:	f001 fca3 	bl	8001f7c <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOB, D7_Pin, ((data>>3)&0x01));
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	08db      	lsrs	r3, r3, #3
 800063a:	b2db      	uxtb	r3, r3
 800063c:	f003 0301 	and.w	r3, r3, #1
 8000640:	b2db      	uxtb	r3, r3
 8000642:	461a      	mov	r2, r3
 8000644:	2120      	movs	r1, #32
 8000646:	481a      	ldr	r0, [pc, #104]	; (80006b0 <LCD_send+0x94>)
 8000648:	f001 fc98 	bl	8001f7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, D6_Pin, ((data>>2)&0x01));
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	089b      	lsrs	r3, r3, #2
 8000650:	b2db      	uxtb	r3, r3
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	461a      	mov	r2, r3
 800065a:	2110      	movs	r1, #16
 800065c:	4814      	ldr	r0, [pc, #80]	; (80006b0 <LCD_send+0x94>)
 800065e:	f001 fc8d 	bl	8001f7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, D5_Pin, ((data>>1)&0x01));
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	085b      	lsrs	r3, r3, #1
 8000666:	b2db      	uxtb	r3, r3
 8000668:	f003 0301 	and.w	r3, r3, #1
 800066c:	b2db      	uxtb	r3, r3
 800066e:	461a      	mov	r2, r3
 8000670:	2108      	movs	r1, #8
 8000672:	480f      	ldr	r0, [pc, #60]	; (80006b0 <LCD_send+0x94>)
 8000674:	f001 fc82 	bl	8001f7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, D4_Pin, ((data>>0)&0x01));
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	b2db      	uxtb	r3, r3
 8000680:	461a      	mov	r2, r3
 8000682:	2104      	movs	r1, #4
 8000684:	480a      	ldr	r0, [pc, #40]	; (80006b0 <LCD_send+0x94>)
 8000686:	f001 fc79 	bl	8001f7c <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOA, E_Pin, 1);
 800068a:	2201      	movs	r2, #1
 800068c:	2140      	movs	r1, #64	; 0x40
 800068e:	4807      	ldr	r0, [pc, #28]	; (80006ac <LCD_send+0x90>)
 8000690:	f001 fc74 	bl	8001f7c <HAL_GPIO_WritePin>
    //LCD_delay(200);
    /*--working:
     *  HAL_Delay(4);
     */
    //HAL_Delay(1);
    LCD_delay(80);
 8000694:	2050      	movs	r0, #80	; 0x50
 8000696:	f7ff ff51 	bl	800053c <LCD_delay>
    HAL_GPIO_WritePin(GPIOA, E_Pin, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2140      	movs	r1, #64	; 0x40
 800069e:	4803      	ldr	r0, [pc, #12]	; (80006ac <LCD_send+0x90>)
 80006a0:	f001 fc6c 	bl	8001f7c <HAL_GPIO_WritePin>
    //LCD_delay(0);
}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40020000 	.word	0x40020000
 80006b0:	40020400 	.word	0x40020400

080006b4 <LCD_send_string>:


void LCD_send_string(char *str){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	HAL_Delay(4);
 80006bc:	2004      	movs	r0, #4
 80006be:	f000 fd31 	bl	8001124 <HAL_Delay>
	while (*str) LCD_send_data(*str++);
 80006c2:	e006      	b.n	80006d2 <LCD_send_string+0x1e>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	607a      	str	r2, [r7, #4]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ff71 	bl	80005b4 <LCD_send_data>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d1f4      	bne.n	80006c4 <LCD_send_string+0x10>
}
 80006da:	bf00      	nop
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <LCD_cur>:


void LCD_cur(int row, int col){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]

    switch(row)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d003      	beq.n	80006fc <LCD_cur+0x18>
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d005      	beq.n	8000706 <LCD_cur+0x22>
 80006fa:	e009      	b.n	8000710 <LCD_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000702:	603b      	str	r3, [r7, #0]
            break;
 8000704:	e004      	b.n	8000710 <LCD_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800070c:	603b      	str	r3, [r7, #0]
            break;
 800070e:	bf00      	nop
    }
    LCD_send_cmd(col);
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	b2db      	uxtb	r3, r3
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff67 	bl	80005e8 <LCD_send_cmd>
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <LCD_cls>:


void LCD_cls(){
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	//LCD_send_cmd(0x00);
	LCD_cur(0, 0);
 8000728:	2100      	movs	r1, #0
 800072a:	2000      	movs	r0, #0
 800072c:	f7ff ffda 	bl	80006e4 <LCD_cur>
	LCD_send_string("                ");
 8000730:	4805      	ldr	r0, [pc, #20]	; (8000748 <LCD_cls+0x24>)
 8000732:	f7ff ffbf 	bl	80006b4 <LCD_send_string>
	LCD_cur(1, 0);
 8000736:	2100      	movs	r1, #0
 8000738:	2001      	movs	r0, #1
 800073a:	f7ff ffd3 	bl	80006e4 <LCD_cur>
	LCD_send_string("                ");
 800073e:	4802      	ldr	r0, [pc, #8]	; (8000748 <LCD_cls+0x24>)
 8000740:	f7ff ffb8 	bl	80006b4 <LCD_send_string>
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	080038d8 	.word	0x080038d8

0800074c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000752:	463b      	mov	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800075e:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <MX_ADC1_Init+0x98>)
 8000760:	4a21      	ldr	r2, [pc, #132]	; (80007e8 <MX_ADC1_Init+0x9c>)
 8000762:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000764:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <MX_ADC1_Init+0x98>)
 8000766:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800076a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800076c:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <MX_ADC1_Init+0x98>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000772:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <MX_ADC1_Init+0x98>)
 8000774:	2201      	movs	r2, #1
 8000776:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000778:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_ADC1_Init+0x98>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800077e:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <MX_ADC1_Init+0x98>)
 8000780:	2200      	movs	r2, #0
 8000782:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000786:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_ADC1_Init+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800078c:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <MX_ADC1_Init+0x98>)
 800078e:	4a17      	ldr	r2, [pc, #92]	; (80007ec <MX_ADC1_Init+0xa0>)
 8000790:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000792:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_ADC1_Init+0x98>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_ADC1_Init+0x98>)
 800079a:	2201      	movs	r2, #1
 800079c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_ADC1_Init+0x98>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_ADC1_Init+0x98>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ac:	480d      	ldr	r0, [pc, #52]	; (80007e4 <MX_ADC1_Init+0x98>)
 80007ae:	f000 fcdd 	bl	800116c <HAL_ADC_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007b8:	f000 faf2 	bl	8000da0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007bc:	2300      	movs	r3, #0
 80007be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007c0:	2301      	movs	r3, #1
 80007c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c8:	463b      	mov	r3, r7
 80007ca:	4619      	mov	r1, r3
 80007cc:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_ADC1_Init+0x98>)
 80007ce:	f000 fe77 	bl	80014c0 <HAL_ADC_ConfigChannel>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007d8:	f000 fae2 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	2000009c 	.word	0x2000009c
 80007e8:	40012000 	.word	0x40012000
 80007ec:	0f000001 	.word	0x0f000001

080007f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a15      	ldr	r2, [pc, #84]	; (8000864 <HAL_ADC_MspInit+0x74>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d123      	bne.n	800085a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <HAL_ADC_MspInit+0x78>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000816:	4a14      	ldr	r2, [pc, #80]	; (8000868 <HAL_ADC_MspInit+0x78>)
 8000818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800081c:	6453      	str	r3, [r2, #68]	; 0x44
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <HAL_ADC_MspInit+0x78>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <HAL_ADC_MspInit+0x78>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <HAL_ADC_MspInit+0x78>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <HAL_ADC_MspInit+0x78>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000842:	2301      	movs	r3, #1
 8000844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000846:	2303      	movs	r3, #3
 8000848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	; (800086c <HAL_ADC_MspInit+0x7c>)
 8000856:	f001 f9e5 	bl	8001c24 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800085a:	bf00      	nop
 800085c:	3728      	adds	r7, #40	; 0x28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40012000 	.word	0x40012000
 8000868:	40023800 	.word	0x40023800
 800086c:	40020000 	.word	0x40020000

08000870 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	; 0x28
 8000874:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000886:	4b33      	ldr	r3, [pc, #204]	; (8000954 <MX_GPIO_Init+0xe4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a32      	ldr	r2, [pc, #200]	; (8000954 <MX_GPIO_Init+0xe4>)
 800088c:	f043 0310 	orr.w	r3, r3, #16
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b30      	ldr	r3, [pc, #192]	; (8000954 <MX_GPIO_Init+0xe4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0310 	and.w	r3, r3, #16
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089e:	4b2d      	ldr	r3, [pc, #180]	; (8000954 <MX_GPIO_Init+0xe4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a2c      	ldr	r2, [pc, #176]	; (8000954 <MX_GPIO_Init+0xe4>)
 80008a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b2a      	ldr	r3, [pc, #168]	; (8000954 <MX_GPIO_Init+0xe4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	4b27      	ldr	r3, [pc, #156]	; (8000954 <MX_GPIO_Init+0xe4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a26      	ldr	r2, [pc, #152]	; (8000954 <MX_GPIO_Init+0xe4>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b24      	ldr	r3, [pc, #144]	; (8000954 <MX_GPIO_Init+0xe4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ce:	4b21      	ldr	r3, [pc, #132]	; (8000954 <MX_GPIO_Init+0xe4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a20      	ldr	r2, [pc, #128]	; (8000954 <MX_GPIO_Init+0xe4>)
 80008d4:	f043 0308 	orr.w	r3, r3, #8
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b1e      	ldr	r3, [pc, #120]	; (8000954 <MX_GPIO_Init+0xe4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0308 	and.w	r3, r3, #8
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <MX_GPIO_Init+0xe4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a1a      	ldr	r2, [pc, #104]	; (8000954 <MX_GPIO_Init+0xe4>)
 80008ec:	f043 0302 	orr.w	r3, r3, #2
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <MX_GPIO_Init+0xe4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0302 	and.w	r3, r3, #2
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2118      	movs	r1, #24
 8000902:	4815      	ldr	r0, [pc, #84]	; (8000958 <MX_GPIO_Init+0xe8>)
 8000904:	f001 fb3a 	bl	8001f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000908:	2200      	movs	r2, #0
 800090a:	21fc      	movs	r1, #252	; 0xfc
 800090c:	4813      	ldr	r0, [pc, #76]	; (800095c <MX_GPIO_Init+0xec>)
 800090e:	f001 fb35 	bl	8001f7c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000912:	2318      	movs	r3, #24
 8000914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	480b      	ldr	r0, [pc, #44]	; (8000958 <MX_GPIO_Init+0xe8>)
 800092a:	f001 f97b 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD2 PD3 PD4 PD5
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800092e:	23fc      	movs	r3, #252	; 0xfc
 8000930:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_GPIO_Init+0xec>)
 8000946:	f001 f96d 	bl	8001c24 <HAL_GPIO_Init>

}
 800094a:	bf00      	nop
 800094c:	3728      	adds	r7, #40	; 0x28
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800
 8000958:	40021000 	.word	0x40021000
 800095c:	40020c00 	.word	0x40020c00

08000960 <MQResistanceCalculation>:


//***********************SENSOR-START***********************//
//********************calibration-start********************//
float MQResistanceCalculation(int raw_adc)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  return ( ((float)10*(1023-raw_adc)/raw_adc));
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800096e:	1a9b      	subs	r3, r3, r2
 8000970:	ee07 3a90 	vmov	s15, r3
 8000974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000978:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800097c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	ee07 3a90 	vmov	s15, r3
 8000986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800098a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800098e:	eef0 7a66 	vmov.f32	s15, s13
}
 8000992:	eeb0 0a67 	vmov.f32	s0, s15
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <MQCalibration>:

float MQCalibration()
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
  int i;
  float val=0;
 80009a6:	f04f 0300 	mov.w	r3, #0
 80009aa:	603b      	str	r3, [r7, #0]

  for (i=0;i<50;i++) {            //take multiple samples
 80009ac:	2300      	movs	r3, #0
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	e01c      	b.n	80009ec <MQCalibration+0x4c>
	  HAL_ADC_Start(&hadc1);
 80009b2:	4821      	ldr	r0, [pc, #132]	; (8000a38 <MQCalibration+0x98>)
 80009b4:	f000 fc1e 	bl	80011f4 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1, 1);
 80009b8:	2101      	movs	r1, #1
 80009ba:	481f      	ldr	r0, [pc, #124]	; (8000a38 <MQCalibration+0x98>)
 80009bc:	f000 fce8 	bl	8001390 <HAL_ADC_PollForConversion>
    val += MQResistanceCalculation(HAL_ADC_GetValue(&hadc1));
 80009c0:	481d      	ldr	r0, [pc, #116]	; (8000a38 <MQCalibration+0x98>)
 80009c2:	f000 fd70 	bl	80014a6 <HAL_ADC_GetValue>
 80009c6:	4603      	mov	r3, r0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff ffc9 	bl	8000960 <MQResistanceCalculation>
 80009ce:	eeb0 7a40 	vmov.f32	s14, s0
 80009d2:	edd7 7a00 	vldr	s15, [r7]
 80009d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80009da:	edc7 7a00 	vstr	s15, [r7]
    HAL_Delay(500);
 80009de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009e2:	f000 fb9f 	bl	8001124 <HAL_Delay>
  for (i=0;i<50;i++) {            //take multiple samples
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	3301      	adds	r3, #1
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2b31      	cmp	r3, #49	; 0x31
 80009f0:	dddf      	ble.n	80009b2 <MQCalibration+0x12>
  }
  val = val/50;                   //calculate the average value
 80009f2:	ed97 7a00 	vldr	s14, [r7]
 80009f6:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000a3c <MQCalibration+0x9c>
 80009fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009fe:	edc7 7a00 	vstr	s15, [r7]

  val = val/9.21;                        //divided by RO_CLEAN_AIR_FACTOR yields the Ro
 8000a02:	edd7 7a00 	vldr	s15, [r7]
 8000a06:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a0a:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000a30 <MQCalibration+0x90>
 8000a0e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a12:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a16:	edc7 7a00 	vstr	s15, [r7]
                                                        //according to the chart in the datasheet
  return val;
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	ee07 3a90 	vmov	s15, r3
}
 8000a20:	eeb0 0a67 	vmov.f32	s0, s15
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	f3af 8000 	nop.w
 8000a30:	1eb851ec 	.word	0x1eb851ec
 8000a34:	40226b85 	.word	0x40226b85
 8000a38:	2000009c 	.word	0x2000009c
 8000a3c:	42480000 	.word	0x42480000

08000a40 <MQRead>:

//********************calibration-end********************//

//********************getH2Value-start********************//
float MQRead()
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
  int i;
  float rs=0;
 8000a46:	f04f 0300 	mov.w	r3, #0
 8000a4a:	603b      	str	r3, [r7, #0]

  for (i=0;i<5;i++) {
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	e01b      	b.n	8000a8a <MQRead+0x4a>
	  HAL_ADC_Start(&hadc1);
 8000a52:	4817      	ldr	r0, [pc, #92]	; (8000ab0 <MQRead+0x70>)
 8000a54:	f000 fbce 	bl	80011f4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1);
 8000a58:	2101      	movs	r1, #1
 8000a5a:	4815      	ldr	r0, [pc, #84]	; (8000ab0 <MQRead+0x70>)
 8000a5c:	f000 fc98 	bl	8001390 <HAL_ADC_PollForConversion>
    rs += MQResistanceCalculation(HAL_ADC_GetValue(&hadc1));
 8000a60:	4813      	ldr	r0, [pc, #76]	; (8000ab0 <MQRead+0x70>)
 8000a62:	f000 fd20 	bl	80014a6 <HAL_ADC_GetValue>
 8000a66:	4603      	mov	r3, r0
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff79 	bl	8000960 <MQResistanceCalculation>
 8000a6e:	eeb0 7a40 	vmov.f32	s14, s0
 8000a72:	edd7 7a00 	vldr	s15, [r7]
 8000a76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a7a:	edc7 7a00 	vstr	s15, [r7]
    HAL_Delay(50);
 8000a7e:	2032      	movs	r0, #50	; 0x32
 8000a80:	f000 fb50 	bl	8001124 <HAL_Delay>
  for (i=0;i<5;i++) {
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3301      	adds	r3, #1
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2b04      	cmp	r3, #4
 8000a8e:	dde0      	ble.n	8000a52 <MQRead+0x12>
  }

  rs = rs/5;
 8000a90:	ed97 7a00 	vldr	s14, [r7]
 8000a94:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8000a98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a9c:	edc7 7a00 	vstr	s15, [r7]

  return rs;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	ee07 3a90 	vmov	s15, r3
}
 8000aa6:	eeb0 0a67 	vmov.f32	s0, s15
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	2000009c 	.word	0x2000009c

08000ab4 <MQGet>:

int MQGet(float rs_ro_ratio, float *pcurve)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	ed87 0a01 	vstr	s0, [r7, #4]
 8000abe:	6038      	str	r0, [r7, #0]
	if (1) {
		int out = (pow(10,( ((log(rs_ro_ratio)-pcurve[1])/pcurve[2]) + pcurve[0])));
 8000ac0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ac4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ac8:	eeb0 0b47 	vmov.f64	d0, d7
 8000acc:	f002 fb08 	bl	80030e0 <log>
 8000ad0:	eeb0 6b40 	vmov.f64	d6, d0
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	3304      	adds	r3, #4
 8000ad8:	edd3 7a00 	vldr	s15, [r3]
 8000adc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ae0:	ee36 5b47 	vsub.f64	d5, d6, d7
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	3308      	adds	r3, #8
 8000ae8:	edd3 7a00 	vldr	s15, [r3]
 8000aec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000af0:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	edd3 7a00 	vldr	s15, [r3]
 8000afa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000afe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b02:	eeb0 1b47 	vmov.f64	d1, d7
 8000b06:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8000b0a:	f002 fc85 	bl	8003418 <pow>
 8000b0e:	eeb0 7b40 	vmov.f64	d7, d0
 8000b12:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000b16:	ee17 3a90 	vmov	r3, s15
 8000b1a:	60fb      	str	r3, [r7, #12]
	  return out;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
	}
	return 0;
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <MQGetGasPercentage>:

int MQGetGasPercentage(float rs_ro_ratio, int gas_id)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000b32:	6038      	str	r0, [r7, #0]
  if ( gas_id == GAS_H2) {
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d106      	bne.n	8000b48 <MQGetGasPercentage+0x20>
     return MQGet(rs_ro_ratio,H2Curve);
 8000b3a:	4806      	ldr	r0, [pc, #24]	; (8000b54 <MQGetGasPercentage+0x2c>)
 8000b3c:	ed97 0a01 	vldr	s0, [r7, #4]
 8000b40:	f7ff ffb8 	bl	8000ab4 <MQGet>
 8000b44:	4603      	mov	r3, r0
 8000b46:	e000      	b.n	8000b4a <MQGetGasPercentage+0x22>
  }
  return 0;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000000 	.word	0x20000000

08000b58 <ms_delay>:

//********************getH2Value-end********************//
//***********************SENSOR-END**********************//

//***********************Delay-START*********************//
void ms_delay(uint32_t ms){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(&htim2);
 8000b60:	4809      	ldr	r0, [pc, #36]	; (8000b88 <ms_delay+0x30>)
 8000b62:	f001 ff87 	bl	8002a74 <HAL_TIM_Base_Start>
	htim2.Instance->CNT=0;
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <ms_delay+0x30>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	625a      	str	r2, [r3, #36]	; 0x24
	while(htim2.Instance->CNT < ms);
 8000b6e:	bf00      	nop
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <ms_delay+0x30>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d8f9      	bhi.n	8000b70 <ms_delay+0x18>

}
 8000b7c:	bf00      	nop
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000134 	.word	0x20000134

08000b8c <s_delay>:

void s_delay(uint32_t s){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	for (int var = 0;  var < s; var++) {
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	e006      	b.n	8000ba8 <s_delay+0x1c>
		ms_delay(1000);
 8000b9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b9e:	f7ff ffdb 	bl	8000b58 <ms_delay>
	for (int var = 0;  var < s; var++) {
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d8f4      	bhi.n	8000b9a <s_delay+0xe>
	}
}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000bc2:	f000 f8c1 	bl	8000d48 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc6:	f000 fa50 	bl	800106a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bca:	f000 f84f 	bl	8000c6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bce:	f7ff fe4f 	bl	8000870 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000bd2:	f7ff fdbb 	bl	800074c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000bd6:	f000 f949 	bl	8000e6c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000bda:	f000 f99b 	bl	8000f14 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  LCD_init();
 8000bde:	f7ff fcc7 	bl	8000570 <LCD_init>
  LCD_cls();
 8000be2:	f7ff fd9f 	bl	8000724 <LCD_cls>
  HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET);
 8000be6:	2201      	movs	r2, #1
 8000be8:	2110      	movs	r1, #16
 8000bea:	481d      	ldr	r0, [pc, #116]	; (8000c60 <main+0xa4>)
 8000bec:	f001 f9c6 	bl	8001f7c <HAL_GPIO_WritePin>
  //min_delay(2);
  HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2110      	movs	r1, #16
 8000bf4:	481a      	ldr	r0, [pc, #104]	; (8000c60 <main+0xa4>)
 8000bf6:	f001 f9c1 	bl	8001f7c <HAL_GPIO_WritePin>
  s_delay(2);
 8000bfa:	2002      	movs	r0, #2
 8000bfc:	f7ff ffc6 	bl	8000b8c <s_delay>
  HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET);
 8000c00:	2201      	movs	r2, #1
 8000c02:	2110      	movs	r1, #16
 8000c04:	4816      	ldr	r0, [pc, #88]	; (8000c60 <main+0xa4>)
 8000c06:	f001 f9b9 	bl	8001f7c <HAL_GPIO_WritePin>
  Ro = MQCalibration();
 8000c0a:	f7ff fec9 	bl	80009a0 <MQCalibration>
 8000c0e:	eef0 7a40 	vmov.f32	s15, s0
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <main+0xa8>)
 8000c14:	edc3 7a00 	vstr	s15, [r3]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		ppm = MQGetGasPercentage(MQRead()/Ro,GAS_H2);
 8000c18:	f7ff ff12 	bl	8000a40 <MQRead>
 8000c1c:	eef0 6a40 	vmov.f32	s13, s0
 8000c20:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <main+0xa8>)
 8000c22:	edd3 7a00 	vldr	s15, [r3]
 8000c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	eeb0 0a47 	vmov.f32	s0, s14
 8000c30:	f7ff ff7a 	bl	8000b28 <MQGetGasPercentage>
 8000c34:	4603      	mov	r3, r0
 8000c36:	4a0c      	ldr	r2, [pc, #48]	; (8000c68 <main+0xac>)
 8000c38:	6013      	str	r3, [r2, #0]
		HAL_Delay(200);
 8000c3a:	20c8      	movs	r0, #200	; 0xc8
 8000c3c:	f000 fa72 	bl	8001124 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, LED_Pin);
 8000c40:	2110      	movs	r1, #16
 8000c42:	4807      	ldr	r0, [pc, #28]	; (8000c60 <main+0xa4>)
 8000c44:	f001 f9b3 	bl	8001fae <HAL_GPIO_TogglePin>
	    LCD_cur(0,0);
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f7ff fd4a 	bl	80006e4 <LCD_cur>
	    char str[16];
	    //sprintf(str, "PPM: %d", ppm);
	    LCD_cls();
 8000c50:	f7ff fd68 	bl	8000724 <LCD_cls>
	    LCD_send_string(str);
 8000c54:	463b      	mov	r3, r7
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fd2c 	bl	80006b4 <LCD_send_string>
  {
 8000c5c:	e7dc      	b.n	8000c18 <main+0x5c>
 8000c5e:	bf00      	nop
 8000c60:	40020000 	.word	0x40020000
 8000c64:	2000000c 	.word	0x2000000c
 8000c68:	200000e4 	.word	0x200000e4

08000c6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b094      	sub	sp, #80	; 0x50
 8000c70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	2234      	movs	r2, #52	; 0x34
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f002 fa26 	bl	80030cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c80:	f107 0308 	add.w	r3, r7, #8
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c90:	4b2b      	ldr	r3, [pc, #172]	; (8000d40 <SystemClock_Config+0xd4>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	4a2a      	ldr	r2, [pc, #168]	; (8000d40 <SystemClock_Config+0xd4>)
 8000c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9c:	4b28      	ldr	r3, [pc, #160]	; (8000d40 <SystemClock_Config+0xd4>)
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ca8:	4b26      	ldr	r3, [pc, #152]	; (8000d44 <SystemClock_Config+0xd8>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a25      	ldr	r2, [pc, #148]	; (8000d44 <SystemClock_Config+0xd8>)
 8000cae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	4b23      	ldr	r3, [pc, #140]	; (8000d44 <SystemClock_Config+0xd8>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cbc:	603b      	str	r3, [r7, #0]
 8000cbe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cd2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000cd8:	23d8      	movs	r3, #216	; 0xd8
 8000cda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	4618      	mov	r0, r3
 8000cee:	f001 f9c9 	bl	8002084 <HAL_RCC_OscConfig>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000cf8:	f000 f852 	bl	8000da0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cfc:	f001 f972 	bl	8001fe4 <HAL_PWREx_EnableOverDrive>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000d06:	f000 f84b 	bl	8000da0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0a:	230f      	movs	r3, #15
 8000d0c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d16:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d20:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d22:	f107 0308 	add.w	r3, r7, #8
 8000d26:	2107      	movs	r1, #7
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f001 fc59 	bl	80025e0 <HAL_RCC_ClockConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000d34:	f000 f834 	bl	8000da0 <Error_Handler>
  }
}
 8000d38:	bf00      	nop
 8000d3a:	3750      	adds	r7, #80	; 0x50
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40007000 	.word	0x40007000

08000d48 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d4e:	463b      	mov	r3, r7
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d5a:	f000 fee7 	bl	8001b2c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d6a:	231f      	movs	r3, #31
 8000d6c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d6e:	2387      	movs	r3, #135	; 0x87
 8000d70:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d76:	2300      	movs	r3, #0
 8000d78:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 ff05 	bl	8001b9c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d92:	2004      	movs	r0, #4
 8000d94:	f000 fee2 	bl	8001b5c <HAL_MPU_Enable>

}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da4:	b672      	cpsid	i
}
 8000da6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <Error_Handler+0x8>
	...

08000dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000db2:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <HAL_MspInit+0x44>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	4a0e      	ldr	r2, [pc, #56]	; (8000df0 <HAL_MspInit+0x44>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <HAL_MspInit+0x44>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <HAL_MspInit+0x44>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	4a08      	ldr	r2, [pc, #32]	; (8000df0 <HAL_MspInit+0x44>)
 8000dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_MspInit+0x44>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800

08000df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <NMI_Handler+0x4>

08000dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <HardFault_Handler+0x4>

08000e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <MemManage_Handler+0x4>

08000e06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <BusFault_Handler+0x4>

08000e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <UsageFault_Handler+0x4>

08000e12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e40:	f000 f950 	bl	80010e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <SystemInit+0x20>)
 8000e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e52:	4a05      	ldr	r2, [pc, #20]	; (8000e68 <SystemInit+0x20>)
 8000e54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e72:	f107 0310 	add.w	r3, r7, #16
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e8a:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <MX_TIM1_Init+0xa0>)
 8000e8c:	4a20      	ldr	r2, [pc, #128]	; (8000f10 <MX_TIM1_Init+0xa4>)
 8000e8e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216;
 8000e90:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <MX_TIM1_Init+0xa0>)
 8000e92:	22d8      	movs	r2, #216	; 0xd8
 8000e94:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e96:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <MX_TIM1_Init+0xa0>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <MX_TIM1_Init+0xa0>)
 8000e9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ea2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea4:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <MX_TIM1_Init+0xa0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eaa:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <MX_TIM1_Init+0xa0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb0:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <MX_TIM1_Init+0xa0>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000eb6:	4815      	ldr	r0, [pc, #84]	; (8000f0c <MX_TIM1_Init+0xa0>)
 8000eb8:	f001 fd84 	bl	80029c4 <HAL_TIM_Base_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000ec2:	f7ff ff6d 	bl	8000da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ecc:	f107 0310 	add.w	r3, r7, #16
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480e      	ldr	r0, [pc, #56]	; (8000f0c <MX_TIM1_Init+0xa0>)
 8000ed4:	f001 fe3e 	bl	8002b54 <HAL_TIM_ConfigClockSource>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000ede:	f7ff ff5f 	bl	8000da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4806      	ldr	r0, [pc, #24]	; (8000f0c <MX_TIM1_Init+0xa0>)
 8000ef4:	f002 f832 	bl	8002f5c <HAL_TIMEx_MasterConfigSynchronization>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000efe:	f7ff ff4f 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	3720      	adds	r7, #32
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200000e8 	.word	0x200000e8
 8000f10:	40010000 	.word	0x40010000

08000f14 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f1a:	f107 0310 	add.w	r3, r7, #16
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f32:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <MX_TIM2_Init+0x98>)
 8000f34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f38:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 65535;
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <MX_TIM2_Init+0x98>)
 8000f3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f40:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <MX_TIM2_Init+0x98>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 215999;
 8000f48:	4b18      	ldr	r3, [pc, #96]	; (8000fac <MX_TIM2_Init+0x98>)
 8000f4a:	4a19      	ldr	r2, [pc, #100]	; (8000fb0 <MX_TIM2_Init+0x9c>)
 8000f4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f4e:	4b17      	ldr	r3, [pc, #92]	; (8000fac <MX_TIM2_Init+0x98>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f54:	4b15      	ldr	r3, [pc, #84]	; (8000fac <MX_TIM2_Init+0x98>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f5a:	4814      	ldr	r0, [pc, #80]	; (8000fac <MX_TIM2_Init+0x98>)
 8000f5c:	f001 fd32 	bl	80029c4 <HAL_TIM_Base_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f66:	f7ff ff1b 	bl	8000da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	4619      	mov	r1, r3
 8000f76:	480d      	ldr	r0, [pc, #52]	; (8000fac <MX_TIM2_Init+0x98>)
 8000f78:	f001 fdec 	bl	8002b54 <HAL_TIM_ConfigClockSource>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f82:	f7ff ff0d 	bl	8000da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f86:	2300      	movs	r3, #0
 8000f88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	4619      	mov	r1, r3
 8000f92:	4806      	ldr	r0, [pc, #24]	; (8000fac <MX_TIM2_Init+0x98>)
 8000f94:	f001 ffe2 	bl	8002f5c <HAL_TIMEx_MasterConfigSynchronization>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f9e:	f7ff feff 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	3720      	adds	r7, #32
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000134 	.word	0x20000134
 8000fb0:	00034bbf 	.word	0x00034bbf

08000fb4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a13      	ldr	r2, [pc, #76]	; (8001010 <HAL_TIM_Base_MspInit+0x5c>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d10c      	bne.n	8000fe0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <HAL_TIM_Base_MspInit+0x60>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	4a12      	ldr	r2, [pc, #72]	; (8001014 <HAL_TIM_Base_MspInit+0x60>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <HAL_TIM_Base_MspInit+0x60>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000fde:	e010      	b.n	8001002 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM2)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fe8:	d10b      	bne.n	8001002 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <HAL_TIM_Base_MspInit+0x60>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	4a09      	ldr	r2, [pc, #36]	; (8001014 <HAL_TIM_Base_MspInit+0x60>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <HAL_TIM_Base_MspInit+0x60>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
}
 8001002:	bf00      	nop
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40010000 	.word	0x40010000
 8001014:	40023800 	.word	0x40023800

08001018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001018:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001050 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800101c:	480d      	ldr	r0, [pc, #52]	; (8001054 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800101e:	490e      	ldr	r1, [pc, #56]	; (8001058 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001020:	4a0e      	ldr	r2, [pc, #56]	; (800105c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001024:	e002      	b.n	800102c <LoopCopyDataInit>

08001026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102a:	3304      	adds	r3, #4

0800102c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800102c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001030:	d3f9      	bcc.n	8001026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001032:	4a0b      	ldr	r2, [pc, #44]	; (8001060 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001034:	4c0b      	ldr	r4, [pc, #44]	; (8001064 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001038:	e001      	b.n	800103e <LoopFillZerobss>

0800103a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800103c:	3204      	adds	r2, #4

0800103e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001040:	d3fb      	bcc.n	800103a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001042:	f7ff ff01 	bl	8000e48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001046:	f002 f81d 	bl	8003084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800104a:	f7ff fdb7 	bl	8000bbc <main>
  bx  lr    
 800104e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001050:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001058:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800105c:	08005a58 	.word	0x08005a58
  ldr r2, =_sbss
 8001060:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001064:	20000184 	.word	0x20000184

08001068 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001068:	e7fe      	b.n	8001068 <ADC_IRQHandler>

0800106a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106e:	2003      	movs	r0, #3
 8001070:	f000 fd28 	bl	8001ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001074:	200f      	movs	r0, #15
 8001076:	f000 f805 	bl	8001084 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800107a:	f7ff fe97 	bl	8000dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800107e:	2300      	movs	r3, #0
}
 8001080:	4618      	mov	r0, r3
 8001082:	bd80      	pop	{r7, pc}

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_InitTick+0x54>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <HAL_InitTick+0x58>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109a:	fbb3 f3f1 	udiv	r3, r3, r1
 800109e:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 fd35 	bl	8001b12 <HAL_SYSTICK_Config>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00e      	b.n	80010d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b0f      	cmp	r3, #15
 80010b6:	d80a      	bhi.n	80010ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b8:	2200      	movs	r2, #0
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f000 fd0b 	bl	8001ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c4:	4a06      	ldr	r2, [pc, #24]	; (80010e0 <HAL_InitTick+0x5c>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e000      	b.n	80010d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000010 	.word	0x20000010
 80010dc:	20000018 	.word	0x20000018
 80010e0:	20000014 	.word	0x20000014

080010e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_IncTick+0x20>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_IncTick+0x24>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <HAL_IncTick+0x24>)
 80010f6:	6013      	str	r3, [r2, #0]
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000018 	.word	0x20000018
 8001108:	20000180 	.word	0x20000180

0800110c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return uwTick;
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <HAL_GetTick+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000180 	.word	0x20000180

08001124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800112c:	f7ff ffee 	bl	800110c <HAL_GetTick>
 8001130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800113c:	d005      	beq.n	800114a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_Delay+0x44>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800114a:	bf00      	nop
 800114c:	f7ff ffde 	bl	800110c <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	429a      	cmp	r2, r3
 800115a:	d8f7      	bhi.n	800114c <HAL_Delay+0x28>
  {
  }
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000018 	.word	0x20000018

0800116c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001174:	2300      	movs	r3, #0
 8001176:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e031      	b.n	80011e6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	2b00      	cmp	r3, #0
 8001188:	d109      	bne.n	800119e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff fb30 	bl	80007f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f003 0310 	and.w	r3, r3, #16
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d116      	bne.n	80011d8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <HAL_ADC_Init+0x84>)
 80011b0:	4013      	ands	r3, r2
 80011b2:	f043 0202 	orr.w	r2, r3, #2
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 fad6 	bl	800176c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	f023 0303 	bic.w	r3, r3, #3
 80011ce:	f043 0201 	orr.w	r2, r3, #1
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	641a      	str	r2, [r3, #64]	; 0x40
 80011d6:	e001      	b.n	80011dc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	ffffeefd 	.word	0xffffeefd

080011f4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001206:	2b01      	cmp	r3, #1
 8001208:	d101      	bne.n	800120e <HAL_ADC_Start+0x1a>
 800120a:	2302      	movs	r3, #2
 800120c:	e0ad      	b.n	800136a <HAL_ADC_Start+0x176>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2201      	movs	r2, #1
 8001212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b01      	cmp	r3, #1
 8001222:	d018      	beq.n	8001256 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	689a      	ldr	r2, [r3, #8]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 0201 	orr.w	r2, r2, #1
 8001232:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001234:	4b50      	ldr	r3, [pc, #320]	; (8001378 <HAL_ADC_Start+0x184>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a50      	ldr	r2, [pc, #320]	; (800137c <HAL_ADC_Start+0x188>)
 800123a:	fba2 2303 	umull	r2, r3, r2, r3
 800123e:	0c9a      	lsrs	r2, r3, #18
 8001240:	4613      	mov	r3, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4413      	add	r3, r2
 8001246:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001248:	e002      	b.n	8001250 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	3b01      	subs	r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f9      	bne.n	800124a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	2b01      	cmp	r3, #1
 8001262:	d175      	bne.n	8001350 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001268:	4b45      	ldr	r3, [pc, #276]	; (8001380 <HAL_ADC_Start+0x18c>)
 800126a:	4013      	ands	r3, r2
 800126c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800127e:	2b00      	cmp	r3, #0
 8001280:	d007      	beq.n	8001292 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800128a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800129a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800129e:	d106      	bne.n	80012ae <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a4:	f023 0206 	bic.w	r2, r3, #6
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	645a      	str	r2, [r3, #68]	; 0x44
 80012ac:	e002      	b.n	80012b4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80012c4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80012c6:	4b2f      	ldr	r3, [pc, #188]	; (8001384 <HAL_ADC_Start+0x190>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 031f 	and.w	r3, r3, #31
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10f      	bne.n	80012f2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d143      	bne.n	8001368 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689a      	ldr	r2, [r3, #8]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	e03a      	b.n	8001368 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a24      	ldr	r2, [pc, #144]	; (8001388 <HAL_ADC_Start+0x194>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d10e      	bne.n	800131a <HAL_ADC_Start+0x126>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d107      	bne.n	800131a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001318:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800131a:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <HAL_ADC_Start+0x190>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 0310 	and.w	r3, r3, #16
 8001322:	2b00      	cmp	r3, #0
 8001324:	d120      	bne.n	8001368 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a18      	ldr	r2, [pc, #96]	; (800138c <HAL_ADC_Start+0x198>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d11b      	bne.n	8001368 <HAL_ADC_Start+0x174>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d114      	bne.n	8001368 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	e00b      	b.n	8001368 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	f043 0210 	orr.w	r2, r3, #16
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001360:	f043 0201 	orr.w	r2, r3, #1
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000010 	.word	0x20000010
 800137c:	431bde83 	.word	0x431bde83
 8001380:	fffff8fe 	.word	0xfffff8fe
 8001384:	40012300 	.word	0x40012300
 8001388:	40012000 	.word	0x40012000
 800138c:	40012200 	.word	0x40012200

08001390 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ac:	d113      	bne.n	80013d6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80013b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013bc:	d10b      	bne.n	80013d6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f043 0220 	orr.w	r2, r3, #32
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e063      	b.n	800149e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80013d6:	f7ff fe99 	bl	800110c <HAL_GetTick>
 80013da:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013dc:	e021      	b.n	8001422 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e4:	d01d      	beq.n	8001422 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d007      	beq.n	80013fc <HAL_ADC_PollForConversion+0x6c>
 80013ec:	f7ff fe8e 	bl	800110c <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d212      	bcs.n	8001422 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b02      	cmp	r3, #2
 8001408:	d00b      	beq.n	8001422 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f043 0204 	orr.w	r2, r3, #4
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e03d      	b.n	800149e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b02      	cmp	r3, #2
 800142e:	d1d6      	bne.n	80013de <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f06f 0212 	mvn.w	r2, #18
 8001438:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d123      	bne.n	800149c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001458:	2b00      	cmp	r3, #0
 800145a:	d11f      	bne.n	800149c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001462:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001466:	2b00      	cmp	r3, #0
 8001468:	d006      	beq.n	8001478 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001474:	2b00      	cmp	r3, #0
 8001476:	d111      	bne.n	800149c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d105      	bne.n	800149c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	f043 0201 	orr.w	r2, r3, #1
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d101      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x1c>
 80014d8:	2302      	movs	r3, #2
 80014da:	e136      	b.n	800174a <HAL_ADC_ConfigChannel+0x28a>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b09      	cmp	r3, #9
 80014ea:	d93a      	bls.n	8001562 <HAL_ADC_ConfigChannel+0xa2>
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014f4:	d035      	beq.n	8001562 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	68d9      	ldr	r1, [r3, #12]
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	b29b      	uxth	r3, r3
 8001502:	461a      	mov	r2, r3
 8001504:	4613      	mov	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4413      	add	r3, r2
 800150a:	3b1e      	subs	r3, #30
 800150c:	2207      	movs	r2, #7
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	400a      	ands	r2, r1
 800151a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a8d      	ldr	r2, [pc, #564]	; (8001758 <HAL_ADC_ConfigChannel+0x298>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d10a      	bne.n	800153c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68d9      	ldr	r1, [r3, #12]
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	061a      	lsls	r2, r3, #24
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	430a      	orrs	r2, r1
 8001538:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800153a:	e035      	b.n	80015a8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68d9      	ldr	r1, [r3, #12]
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	4618      	mov	r0, r3
 800154e:	4603      	mov	r3, r0
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	4403      	add	r3, r0
 8001554:	3b1e      	subs	r3, #30
 8001556:	409a      	lsls	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001560:	e022      	b.n	80015a8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6919      	ldr	r1, [r3, #16]
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	b29b      	uxth	r3, r3
 800156e:	461a      	mov	r2, r3
 8001570:	4613      	mov	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	4413      	add	r3, r2
 8001576:	2207      	movs	r2, #7
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43da      	mvns	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	400a      	ands	r2, r1
 8001584:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6919      	ldr	r1, [r3, #16]
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	b29b      	uxth	r3, r3
 8001596:	4618      	mov	r0, r3
 8001598:	4603      	mov	r3, r0
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4403      	add	r3, r0
 800159e:	409a      	lsls	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b06      	cmp	r3, #6
 80015ae:	d824      	bhi.n	80015fa <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	3b05      	subs	r3, #5
 80015c2:	221f      	movs	r2, #31
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43da      	mvns	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	400a      	ands	r2, r1
 80015d0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	b29b      	uxth	r3, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	4613      	mov	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	3b05      	subs	r3, #5
 80015ec:	fa00 f203 	lsl.w	r2, r0, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	635a      	str	r2, [r3, #52]	; 0x34
 80015f8:	e04c      	b.n	8001694 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b0c      	cmp	r3, #12
 8001600:	d824      	bhi.n	800164c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	3b23      	subs	r3, #35	; 0x23
 8001614:	221f      	movs	r2, #31
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43da      	mvns	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	400a      	ands	r2, r1
 8001622:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	b29b      	uxth	r3, r3
 8001630:	4618      	mov	r0, r3
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	3b23      	subs	r3, #35	; 0x23
 800163e:	fa00 f203 	lsl.w	r2, r0, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	430a      	orrs	r2, r1
 8001648:	631a      	str	r2, [r3, #48]	; 0x30
 800164a:	e023      	b.n	8001694 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	3b41      	subs	r3, #65	; 0x41
 800165e:	221f      	movs	r2, #31
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43da      	mvns	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	400a      	ands	r2, r1
 800166c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	b29b      	uxth	r3, r3
 800167a:	4618      	mov	r0, r3
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	4613      	mov	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	3b41      	subs	r3, #65	; 0x41
 8001688:	fa00 f203 	lsl.w	r2, r0, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a30      	ldr	r2, [pc, #192]	; (800175c <HAL_ADC_ConfigChannel+0x29c>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d10a      	bne.n	80016b4 <HAL_ADC_ConfigChannel+0x1f4>
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016a6:	d105      	bne.n	80016b4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80016a8:	4b2d      	ldr	r3, [pc, #180]	; (8001760 <HAL_ADC_ConfigChannel+0x2a0>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	4a2c      	ldr	r2, [pc, #176]	; (8001760 <HAL_ADC_ConfigChannel+0x2a0>)
 80016ae:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80016b2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a28      	ldr	r2, [pc, #160]	; (800175c <HAL_ADC_ConfigChannel+0x29c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d10f      	bne.n	80016de <HAL_ADC_ConfigChannel+0x21e>
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b12      	cmp	r3, #18
 80016c4:	d10b      	bne.n	80016de <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80016c6:	4b26      	ldr	r3, [pc, #152]	; (8001760 <HAL_ADC_ConfigChannel+0x2a0>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	4a25      	ldr	r2, [pc, #148]	; (8001760 <HAL_ADC_ConfigChannel+0x2a0>)
 80016cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80016d0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80016d2:	4b23      	ldr	r3, [pc, #140]	; (8001760 <HAL_ADC_ConfigChannel+0x2a0>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	4a22      	ldr	r2, [pc, #136]	; (8001760 <HAL_ADC_ConfigChannel+0x2a0>)
 80016d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016dc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a1e      	ldr	r2, [pc, #120]	; (800175c <HAL_ADC_ConfigChannel+0x29c>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d12b      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x280>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a1a      	ldr	r2, [pc, #104]	; (8001758 <HAL_ADC_ConfigChannel+0x298>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d003      	beq.n	80016fa <HAL_ADC_ConfigChannel+0x23a>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b11      	cmp	r3, #17
 80016f8:	d122      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80016fa:	4b19      	ldr	r3, [pc, #100]	; (8001760 <HAL_ADC_ConfigChannel+0x2a0>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	4a18      	ldr	r2, [pc, #96]	; (8001760 <HAL_ADC_ConfigChannel+0x2a0>)
 8001700:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001704:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001706:	4b16      	ldr	r3, [pc, #88]	; (8001760 <HAL_ADC_ConfigChannel+0x2a0>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	4a15      	ldr	r2, [pc, #84]	; (8001760 <HAL_ADC_ConfigChannel+0x2a0>)
 800170c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001710:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a10      	ldr	r2, [pc, #64]	; (8001758 <HAL_ADC_ConfigChannel+0x298>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d111      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <HAL_ADC_ConfigChannel+0x2a4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a11      	ldr	r2, [pc, #68]	; (8001768 <HAL_ADC_ConfigChannel+0x2a8>)
 8001722:	fba2 2303 	umull	r2, r3, r2, r3
 8001726:	0c9a      	lsrs	r2, r3, #18
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001732:	e002      	b.n	800173a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	3b01      	subs	r3, #1
 8001738:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1f9      	bne.n	8001734 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	10000012 	.word	0x10000012
 800175c:	40012000 	.word	0x40012000
 8001760:	40012300 	.word	0x40012300
 8001764:	20000010 	.word	0x20000010
 8001768:	431bde83 	.word	0x431bde83

0800176c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001774:	4b78      	ldr	r3, [pc, #480]	; (8001958 <ADC_Init+0x1ec>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	4a77      	ldr	r2, [pc, #476]	; (8001958 <ADC_Init+0x1ec>)
 800177a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800177e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001780:	4b75      	ldr	r3, [pc, #468]	; (8001958 <ADC_Init+0x1ec>)
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	4973      	ldr	r1, [pc, #460]	; (8001958 <ADC_Init+0x1ec>)
 800178a:	4313      	orrs	r3, r2
 800178c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800179c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6859      	ldr	r1, [r3, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	021a      	lsls	r2, r3, #8
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80017c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6859      	ldr	r1, [r3, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6899      	ldr	r1, [r3, #8]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68da      	ldr	r2, [r3, #12]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fa:	4a58      	ldr	r2, [pc, #352]	; (800195c <ADC_Init+0x1f0>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d022      	beq.n	8001846 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800180e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6899      	ldr	r1, [r3, #8]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001830:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6899      	ldr	r1, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	430a      	orrs	r2, r1
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	e00f      	b.n	8001866 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001854:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001864:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 0202 	bic.w	r2, r2, #2
 8001874:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6899      	ldr	r1, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	005a      	lsls	r2, r3, #1
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d01b      	beq.n	80018cc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80018b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6859      	ldr	r1, [r3, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	3b01      	subs	r3, #1
 80018c0:	035a      	lsls	r2, r3, #13
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	e007      	b.n	80018dc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	051a      	lsls	r2, r3, #20
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001910:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6899      	ldr	r1, [r3, #8]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800191e:	025a      	lsls	r2, r3, #9
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	430a      	orrs	r2, r1
 8001926:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001936:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6899      	ldr	r1, [r3, #8]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	029a      	lsls	r2, r3, #10
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	609a      	str	r2, [r3, #8]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	40012300 	.word	0x40012300
 800195c:	0f000001 	.word	0x0f000001

08001960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800197c:	4013      	ands	r3, r2
 800197e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <__NVIC_SetPriorityGrouping+0x44>)
 800198a:	4313      	orrs	r3, r2
 800198c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198e:	4a04      	ldr	r2, [pc, #16]	; (80019a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	60d3      	str	r3, [r2, #12]
}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000ed00 	.word	0xe000ed00
 80019a4:	05fa0000 	.word	0x05fa0000

080019a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ac:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <__NVIC_GetPriorityGrouping+0x18>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	0a1b      	lsrs	r3, r3, #8
 80019b2:	f003 0307 	and.w	r3, r3, #7
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	6039      	str	r1, [r7, #0]
 80019ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	db0a      	blt.n	80019ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	490c      	ldr	r1, [pc, #48]	; (8001a10 <__NVIC_SetPriority+0x4c>)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	0112      	lsls	r2, r2, #4
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	440b      	add	r3, r1
 80019e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019ec:	e00a      	b.n	8001a04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	4908      	ldr	r1, [pc, #32]	; (8001a14 <__NVIC_SetPriority+0x50>)
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	3b04      	subs	r3, #4
 80019fc:	0112      	lsls	r2, r2, #4
 80019fe:	b2d2      	uxtb	r2, r2
 8001a00:	440b      	add	r3, r1
 8001a02:	761a      	strb	r2, [r3, #24]
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000e100 	.word	0xe000e100
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b089      	sub	sp, #36	; 0x24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f1c3 0307 	rsb	r3, r3, #7
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	bf28      	it	cs
 8001a36:	2304      	movcs	r3, #4
 8001a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	2b06      	cmp	r3, #6
 8001a40:	d902      	bls.n	8001a48 <NVIC_EncodePriority+0x30>
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3b03      	subs	r3, #3
 8001a46:	e000      	b.n	8001a4a <NVIC_EncodePriority+0x32>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43da      	mvns	r2, r3
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a60:	f04f 31ff 	mov.w	r1, #4294967295
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6a:	43d9      	mvns	r1, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a70:	4313      	orrs	r3, r2
         );
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3724      	adds	r7, #36	; 0x24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a90:	d301      	bcc.n	8001a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a92:	2301      	movs	r3, #1
 8001a94:	e00f      	b.n	8001ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a96:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <SysTick_Config+0x40>)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a9e:	210f      	movs	r1, #15
 8001aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa4:	f7ff ff8e 	bl	80019c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <SysTick_Config+0x40>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aae:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <SysTick_Config+0x40>)
 8001ab0:	2207      	movs	r2, #7
 8001ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	e000e010 	.word	0xe000e010

08001ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff ff47 	bl	8001960 <__NVIC_SetPriorityGrouping>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b086      	sub	sp, #24
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
 8001ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aec:	f7ff ff5c 	bl	80019a8 <__NVIC_GetPriorityGrouping>
 8001af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	68b9      	ldr	r1, [r7, #8]
 8001af6:	6978      	ldr	r0, [r7, #20]
 8001af8:	f7ff ff8e 	bl	8001a18 <NVIC_EncodePriority>
 8001afc:	4602      	mov	r2, r0
 8001afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b02:	4611      	mov	r1, r2
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff5d 	bl	80019c4 <__NVIC_SetPriority>
}
 8001b0a:	bf00      	nop
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff ffb0 	bl	8001a80 <SysTick_Config>
 8001b20:	4603      	mov	r3, r0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
	...

08001b2c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001b30:	f3bf 8f5f 	dmb	sy
}
 8001b34:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001b36:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <HAL_MPU_Disable+0x28>)
 8001b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3a:	4a06      	ldr	r2, [pc, #24]	; (8001b54 <HAL_MPU_Disable+0x28>)
 8001b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b40:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001b42:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <HAL_MPU_Disable+0x2c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	605a      	str	r2, [r3, #4]
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000ed00 	.word	0xe000ed00
 8001b58:	e000ed90 	.word	0xe000ed90

08001b5c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001b64:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <HAL_MPU_Enable+0x38>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <HAL_MPU_Enable+0x3c>)
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	4a09      	ldr	r2, [pc, #36]	; (8001b98 <HAL_MPU_Enable+0x3c>)
 8001b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b78:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001b7a:	f3bf 8f4f 	dsb	sy
}
 8001b7e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b80:	f3bf 8f6f 	isb	sy
}
 8001b84:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000ed90 	.word	0xe000ed90
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	785a      	ldrb	r2, [r3, #1]
 8001ba8:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <HAL_MPU_ConfigRegion+0x84>)
 8001baa:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d029      	beq.n	8001c08 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001bb4:	4a1a      	ldr	r2, [pc, #104]	; (8001c20 <HAL_MPU_ConfigRegion+0x84>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	7b1b      	ldrb	r3, [r3, #12]
 8001bc0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	7adb      	ldrb	r3, [r3, #11]
 8001bc6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bc8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	7a9b      	ldrb	r3, [r3, #10]
 8001bce:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001bd0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	7b5b      	ldrb	r3, [r3, #13]
 8001bd6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001bd8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	7b9b      	ldrb	r3, [r3, #14]
 8001bde:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001be0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	7bdb      	ldrb	r3, [r3, #15]
 8001be6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001be8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	7a5b      	ldrb	r3, [r3, #9]
 8001bee:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001bf0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	7a1b      	ldrb	r3, [r3, #8]
 8001bf6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001bf8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	7812      	ldrb	r2, [r2, #0]
 8001bfe:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c00:	4a07      	ldr	r2, [pc, #28]	; (8001c20 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c02:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c04:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001c06:	e005      	b.n	8001c14 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001c08:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <HAL_MPU_ConfigRegion+0x84>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001c0e:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <HAL_MPU_ConfigRegion+0x84>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	611a      	str	r2, [r3, #16]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	e000ed90 	.word	0xe000ed90

08001c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
 8001c42:	e175      	b.n	8001f30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c44:	2201      	movs	r2, #1
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	f040 8164 	bne.w	8001f2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d005      	beq.n	8001c7a <HAL_GPIO_Init+0x56>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d130      	bne.n	8001cdc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	2203      	movs	r2, #3
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 0201 	and.w	r2, r3, #1
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d017      	beq.n	8001d18 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d123      	bne.n	8001d6c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	08da      	lsrs	r2, r3, #3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3208      	adds	r2, #8
 8001d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	220f      	movs	r2, #15
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	691a      	ldr	r2, [r3, #16]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	08da      	lsrs	r2, r3, #3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3208      	adds	r2, #8
 8001d66:	69b9      	ldr	r1, [r7, #24]
 8001d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	2203      	movs	r2, #3
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0203 	and.w	r2, r3, #3
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 80be 	beq.w	8001f2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dae:	4b66      	ldr	r3, [pc, #408]	; (8001f48 <HAL_GPIO_Init+0x324>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	4a65      	ldr	r2, [pc, #404]	; (8001f48 <HAL_GPIO_Init+0x324>)
 8001db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dba:	4b63      	ldr	r3, [pc, #396]	; (8001f48 <HAL_GPIO_Init+0x324>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001dc6:	4a61      	ldr	r2, [pc, #388]	; (8001f4c <HAL_GPIO_Init+0x328>)
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	3302      	adds	r3, #2
 8001dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	220f      	movs	r2, #15
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4013      	ands	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a58      	ldr	r2, [pc, #352]	; (8001f50 <HAL_GPIO_Init+0x32c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d037      	beq.n	8001e62 <HAL_GPIO_Init+0x23e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a57      	ldr	r2, [pc, #348]	; (8001f54 <HAL_GPIO_Init+0x330>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d031      	beq.n	8001e5e <HAL_GPIO_Init+0x23a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a56      	ldr	r2, [pc, #344]	; (8001f58 <HAL_GPIO_Init+0x334>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d02b      	beq.n	8001e5a <HAL_GPIO_Init+0x236>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a55      	ldr	r2, [pc, #340]	; (8001f5c <HAL_GPIO_Init+0x338>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d025      	beq.n	8001e56 <HAL_GPIO_Init+0x232>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a54      	ldr	r2, [pc, #336]	; (8001f60 <HAL_GPIO_Init+0x33c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d01f      	beq.n	8001e52 <HAL_GPIO_Init+0x22e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a53      	ldr	r2, [pc, #332]	; (8001f64 <HAL_GPIO_Init+0x340>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d019      	beq.n	8001e4e <HAL_GPIO_Init+0x22a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a52      	ldr	r2, [pc, #328]	; (8001f68 <HAL_GPIO_Init+0x344>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d013      	beq.n	8001e4a <HAL_GPIO_Init+0x226>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a51      	ldr	r2, [pc, #324]	; (8001f6c <HAL_GPIO_Init+0x348>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d00d      	beq.n	8001e46 <HAL_GPIO_Init+0x222>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a50      	ldr	r2, [pc, #320]	; (8001f70 <HAL_GPIO_Init+0x34c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d007      	beq.n	8001e42 <HAL_GPIO_Init+0x21e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a4f      	ldr	r2, [pc, #316]	; (8001f74 <HAL_GPIO_Init+0x350>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d101      	bne.n	8001e3e <HAL_GPIO_Init+0x21a>
 8001e3a:	2309      	movs	r3, #9
 8001e3c:	e012      	b.n	8001e64 <HAL_GPIO_Init+0x240>
 8001e3e:	230a      	movs	r3, #10
 8001e40:	e010      	b.n	8001e64 <HAL_GPIO_Init+0x240>
 8001e42:	2308      	movs	r3, #8
 8001e44:	e00e      	b.n	8001e64 <HAL_GPIO_Init+0x240>
 8001e46:	2307      	movs	r3, #7
 8001e48:	e00c      	b.n	8001e64 <HAL_GPIO_Init+0x240>
 8001e4a:	2306      	movs	r3, #6
 8001e4c:	e00a      	b.n	8001e64 <HAL_GPIO_Init+0x240>
 8001e4e:	2305      	movs	r3, #5
 8001e50:	e008      	b.n	8001e64 <HAL_GPIO_Init+0x240>
 8001e52:	2304      	movs	r3, #4
 8001e54:	e006      	b.n	8001e64 <HAL_GPIO_Init+0x240>
 8001e56:	2303      	movs	r3, #3
 8001e58:	e004      	b.n	8001e64 <HAL_GPIO_Init+0x240>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e002      	b.n	8001e64 <HAL_GPIO_Init+0x240>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <HAL_GPIO_Init+0x240>
 8001e62:	2300      	movs	r3, #0
 8001e64:	69fa      	ldr	r2, [r7, #28]
 8001e66:	f002 0203 	and.w	r2, r2, #3
 8001e6a:	0092      	lsls	r2, r2, #2
 8001e6c:	4093      	lsls	r3, r2
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e74:	4935      	ldr	r1, [pc, #212]	; (8001f4c <HAL_GPIO_Init+0x328>)
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	089b      	lsrs	r3, r3, #2
 8001e7a:	3302      	adds	r3, #2
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e82:	4b3d      	ldr	r3, [pc, #244]	; (8001f78 <HAL_GPIO_Init+0x354>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ea6:	4a34      	ldr	r2, [pc, #208]	; (8001f78 <HAL_GPIO_Init+0x354>)
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eac:	4b32      	ldr	r3, [pc, #200]	; (8001f78 <HAL_GPIO_Init+0x354>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ed0:	4a29      	ldr	r2, [pc, #164]	; (8001f78 <HAL_GPIO_Init+0x354>)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ed6:	4b28      	ldr	r3, [pc, #160]	; (8001f78 <HAL_GPIO_Init+0x354>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001efa:	4a1f      	ldr	r2, [pc, #124]	; (8001f78 <HAL_GPIO_Init+0x354>)
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f00:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <HAL_GPIO_Init+0x354>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f24:	4a14      	ldr	r2, [pc, #80]	; (8001f78 <HAL_GPIO_Init+0x354>)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	61fb      	str	r3, [r7, #28]
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	2b0f      	cmp	r3, #15
 8001f34:	f67f ae86 	bls.w	8001c44 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	3724      	adds	r7, #36	; 0x24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40013800 	.word	0x40013800
 8001f50:	40020000 	.word	0x40020000
 8001f54:	40020400 	.word	0x40020400
 8001f58:	40020800 	.word	0x40020800
 8001f5c:	40020c00 	.word	0x40020c00
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40021400 	.word	0x40021400
 8001f68:	40021800 	.word	0x40021800
 8001f6c:	40021c00 	.word	0x40021c00
 8001f70:	40022000 	.word	0x40022000
 8001f74:	40022400 	.word	0x40022400
 8001f78:	40013c00 	.word	0x40013c00

08001f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	807b      	strh	r3, [r7, #2]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f8c:	787b      	ldrb	r3, [r7, #1]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f92:	887a      	ldrh	r2, [r7, #2]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f98:	e003      	b.n	8001fa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f9a:	887b      	ldrh	r3, [r7, #2]
 8001f9c:	041a      	lsls	r2, r3, #16
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	619a      	str	r2, [r3, #24]
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b085      	sub	sp, #20
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fc0:	887a      	ldrh	r2, [r7, #2]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	041a      	lsls	r2, r3, #16
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	43d9      	mvns	r1, r3
 8001fcc:	887b      	ldrh	r3, [r7, #2]
 8001fce:	400b      	ands	r3, r1
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	619a      	str	r2, [r3, #24]
}
 8001fd6:	bf00      	nop
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fee:	4b23      	ldr	r3, [pc, #140]	; (800207c <HAL_PWREx_EnableOverDrive+0x98>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	4a22      	ldr	r2, [pc, #136]	; (800207c <HAL_PWREx_EnableOverDrive+0x98>)
 8001ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffa:	4b20      	ldr	r3, [pc, #128]	; (800207c <HAL_PWREx_EnableOverDrive+0x98>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002002:	603b      	str	r3, [r7, #0]
 8002004:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002006:	4b1e      	ldr	r3, [pc, #120]	; (8002080 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a1d      	ldr	r2, [pc, #116]	; (8002080 <HAL_PWREx_EnableOverDrive+0x9c>)
 800200c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002010:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002012:	f7ff f87b 	bl	800110c <HAL_GetTick>
 8002016:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002018:	e009      	b.n	800202e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800201a:	f7ff f877 	bl	800110c <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002028:	d901      	bls.n	800202e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e022      	b.n	8002074 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800202e:	4b14      	ldr	r3, [pc, #80]	; (8002080 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800203a:	d1ee      	bne.n	800201a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800203c:	4b10      	ldr	r3, [pc, #64]	; (8002080 <HAL_PWREx_EnableOverDrive+0x9c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a0f      	ldr	r2, [pc, #60]	; (8002080 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002046:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002048:	f7ff f860 	bl	800110c <HAL_GetTick>
 800204c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800204e:	e009      	b.n	8002064 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002050:	f7ff f85c 	bl	800110c <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800205e:	d901      	bls.n	8002064 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e007      	b.n	8002074 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002070:	d1ee      	bne.n	8002050 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40023800 	.word	0x40023800
 8002080:	40007000 	.word	0x40007000

08002084 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800208c:	2300      	movs	r3, #0
 800208e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e29b      	b.n	80025d2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 8087 	beq.w	80021b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020a8:	4b96      	ldr	r3, [pc, #600]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 030c 	and.w	r3, r3, #12
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d00c      	beq.n	80020ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020b4:	4b93      	ldr	r3, [pc, #588]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 030c 	and.w	r3, r3, #12
 80020bc:	2b08      	cmp	r3, #8
 80020be:	d112      	bne.n	80020e6 <HAL_RCC_OscConfig+0x62>
 80020c0:	4b90      	ldr	r3, [pc, #576]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020cc:	d10b      	bne.n	80020e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ce:	4b8d      	ldr	r3, [pc, #564]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d06c      	beq.n	80021b4 <HAL_RCC_OscConfig+0x130>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d168      	bne.n	80021b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e275      	b.n	80025d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ee:	d106      	bne.n	80020fe <HAL_RCC_OscConfig+0x7a>
 80020f0:	4b84      	ldr	r3, [pc, #528]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a83      	ldr	r2, [pc, #524]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 80020f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fa:	6013      	str	r3, [r2, #0]
 80020fc:	e02e      	b.n	800215c <HAL_RCC_OscConfig+0xd8>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10c      	bne.n	8002120 <HAL_RCC_OscConfig+0x9c>
 8002106:	4b7f      	ldr	r3, [pc, #508]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a7e      	ldr	r2, [pc, #504]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 800210c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	4b7c      	ldr	r3, [pc, #496]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a7b      	ldr	r2, [pc, #492]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 8002118:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	e01d      	b.n	800215c <HAL_RCC_OscConfig+0xd8>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002128:	d10c      	bne.n	8002144 <HAL_RCC_OscConfig+0xc0>
 800212a:	4b76      	ldr	r3, [pc, #472]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a75      	ldr	r2, [pc, #468]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 8002130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	4b73      	ldr	r3, [pc, #460]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a72      	ldr	r2, [pc, #456]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 800213c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	e00b      	b.n	800215c <HAL_RCC_OscConfig+0xd8>
 8002144:	4b6f      	ldr	r3, [pc, #444]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a6e      	ldr	r2, [pc, #440]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 800214a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	4b6c      	ldr	r3, [pc, #432]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a6b      	ldr	r2, [pc, #428]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 8002156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800215a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d013      	beq.n	800218c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002164:	f7fe ffd2 	bl	800110c <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800216c:	f7fe ffce 	bl	800110c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b64      	cmp	r3, #100	; 0x64
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e229      	b.n	80025d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217e:	4b61      	ldr	r3, [pc, #388]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0xe8>
 800218a:	e014      	b.n	80021b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7fe ffbe 	bl	800110c <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002194:	f7fe ffba 	bl	800110c <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b64      	cmp	r3, #100	; 0x64
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e215      	b.n	80025d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021a6:	4b57      	ldr	r3, [pc, #348]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f0      	bne.n	8002194 <HAL_RCC_OscConfig+0x110>
 80021b2:	e000      	b.n	80021b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d069      	beq.n	8002296 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021c2:	4b50      	ldr	r3, [pc, #320]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00b      	beq.n	80021e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ce:	4b4d      	ldr	r3, [pc, #308]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	d11c      	bne.n	8002214 <HAL_RCC_OscConfig+0x190>
 80021da:	4b4a      	ldr	r3, [pc, #296]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d116      	bne.n	8002214 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e6:	4b47      	ldr	r3, [pc, #284]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d005      	beq.n	80021fe <HAL_RCC_OscConfig+0x17a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d001      	beq.n	80021fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e1e9      	b.n	80025d2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021fe:	4b41      	ldr	r3, [pc, #260]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	493d      	ldr	r1, [pc, #244]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002212:	e040      	b.n	8002296 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d023      	beq.n	8002264 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800221c:	4b39      	ldr	r3, [pc, #228]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a38      	ldr	r2, [pc, #224]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7fe ff70 	bl	800110c <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002230:	f7fe ff6c 	bl	800110c <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e1c7      	b.n	80025d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002242:	4b30      	ldr	r3, [pc, #192]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f0      	beq.n	8002230 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800224e:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4929      	ldr	r1, [pc, #164]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 800225e:	4313      	orrs	r3, r2
 8002260:	600b      	str	r3, [r1, #0]
 8002262:	e018      	b.n	8002296 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002264:	4b27      	ldr	r3, [pc, #156]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a26      	ldr	r2, [pc, #152]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 800226a:	f023 0301 	bic.w	r3, r3, #1
 800226e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7fe ff4c 	bl	800110c <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002278:	f7fe ff48 	bl	800110c <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e1a3      	b.n	80025d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800228a:	4b1e      	ldr	r3, [pc, #120]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d038      	beq.n	8002314 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d019      	beq.n	80022de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022aa:	4b16      	ldr	r3, [pc, #88]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 80022ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ae:	4a15      	ldr	r2, [pc, #84]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b6:	f7fe ff29 	bl	800110c <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022be:	f7fe ff25 	bl	800110c <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e180      	b.n	80025d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d0:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 80022d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f0      	beq.n	80022be <HAL_RCC_OscConfig+0x23a>
 80022dc:	e01a      	b.n	8002314 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022de:	4b09      	ldr	r3, [pc, #36]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 80022e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022e2:	4a08      	ldr	r2, [pc, #32]	; (8002304 <HAL_RCC_OscConfig+0x280>)
 80022e4:	f023 0301 	bic.w	r3, r3, #1
 80022e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ea:	f7fe ff0f 	bl	800110c <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f0:	e00a      	b.n	8002308 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f2:	f7fe ff0b 	bl	800110c <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d903      	bls.n	8002308 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e166      	b.n	80025d2 <HAL_RCC_OscConfig+0x54e>
 8002304:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002308:	4b92      	ldr	r3, [pc, #584]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 800230a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1ee      	bne.n	80022f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80a4 	beq.w	800246a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002322:	4b8c      	ldr	r3, [pc, #560]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10d      	bne.n	800234a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800232e:	4b89      	ldr	r3, [pc, #548]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	4a88      	ldr	r2, [pc, #544]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 8002334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002338:	6413      	str	r3, [r2, #64]	; 0x40
 800233a:	4b86      	ldr	r3, [pc, #536]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002346:	2301      	movs	r3, #1
 8002348:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800234a:	4b83      	ldr	r3, [pc, #524]	; (8002558 <HAL_RCC_OscConfig+0x4d4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002352:	2b00      	cmp	r3, #0
 8002354:	d118      	bne.n	8002388 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002356:	4b80      	ldr	r3, [pc, #512]	; (8002558 <HAL_RCC_OscConfig+0x4d4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a7f      	ldr	r2, [pc, #508]	; (8002558 <HAL_RCC_OscConfig+0x4d4>)
 800235c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002362:	f7fe fed3 	bl	800110c <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800236a:	f7fe fecf 	bl	800110c <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b64      	cmp	r3, #100	; 0x64
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e12a      	b.n	80025d2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800237c:	4b76      	ldr	r3, [pc, #472]	; (8002558 <HAL_RCC_OscConfig+0x4d4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0f0      	beq.n	800236a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d106      	bne.n	800239e <HAL_RCC_OscConfig+0x31a>
 8002390:	4b70      	ldr	r3, [pc, #448]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 8002392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002394:	4a6f      	ldr	r2, [pc, #444]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	6713      	str	r3, [r2, #112]	; 0x70
 800239c:	e02d      	b.n	80023fa <HAL_RCC_OscConfig+0x376>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x33c>
 80023a6:	4b6b      	ldr	r3, [pc, #428]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 80023a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023aa:	4a6a      	ldr	r2, [pc, #424]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 80023ac:	f023 0301 	bic.w	r3, r3, #1
 80023b0:	6713      	str	r3, [r2, #112]	; 0x70
 80023b2:	4b68      	ldr	r3, [pc, #416]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 80023b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b6:	4a67      	ldr	r2, [pc, #412]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 80023b8:	f023 0304 	bic.w	r3, r3, #4
 80023bc:	6713      	str	r3, [r2, #112]	; 0x70
 80023be:	e01c      	b.n	80023fa <HAL_RCC_OscConfig+0x376>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	2b05      	cmp	r3, #5
 80023c6:	d10c      	bne.n	80023e2 <HAL_RCC_OscConfig+0x35e>
 80023c8:	4b62      	ldr	r3, [pc, #392]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 80023ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023cc:	4a61      	ldr	r2, [pc, #388]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 80023ce:	f043 0304 	orr.w	r3, r3, #4
 80023d2:	6713      	str	r3, [r2, #112]	; 0x70
 80023d4:	4b5f      	ldr	r3, [pc, #380]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 80023d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d8:	4a5e      	ldr	r2, [pc, #376]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	6713      	str	r3, [r2, #112]	; 0x70
 80023e0:	e00b      	b.n	80023fa <HAL_RCC_OscConfig+0x376>
 80023e2:	4b5c      	ldr	r3, [pc, #368]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 80023e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e6:	4a5b      	ldr	r2, [pc, #364]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 80023e8:	f023 0301 	bic.w	r3, r3, #1
 80023ec:	6713      	str	r3, [r2, #112]	; 0x70
 80023ee:	4b59      	ldr	r3, [pc, #356]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 80023f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f2:	4a58      	ldr	r2, [pc, #352]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 80023f4:	f023 0304 	bic.w	r3, r3, #4
 80023f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d015      	beq.n	800242e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002402:	f7fe fe83 	bl	800110c <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002408:	e00a      	b.n	8002420 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240a:	f7fe fe7f 	bl	800110c <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	f241 3288 	movw	r2, #5000	; 0x1388
 8002418:	4293      	cmp	r3, r2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e0d8      	b.n	80025d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002420:	4b4c      	ldr	r3, [pc, #304]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 8002422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0ee      	beq.n	800240a <HAL_RCC_OscConfig+0x386>
 800242c:	e014      	b.n	8002458 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242e:	f7fe fe6d 	bl	800110c <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002434:	e00a      	b.n	800244c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002436:	f7fe fe69 	bl	800110c <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	f241 3288 	movw	r2, #5000	; 0x1388
 8002444:	4293      	cmp	r3, r2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e0c2      	b.n	80025d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800244c:	4b41      	ldr	r3, [pc, #260]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 800244e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1ee      	bne.n	8002436 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002458:	7dfb      	ldrb	r3, [r7, #23]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d105      	bne.n	800246a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800245e:	4b3d      	ldr	r3, [pc, #244]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	4a3c      	ldr	r2, [pc, #240]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 8002464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002468:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 80ae 	beq.w	80025d0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002474:	4b37      	ldr	r3, [pc, #220]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 030c 	and.w	r3, r3, #12
 800247c:	2b08      	cmp	r3, #8
 800247e:	d06d      	beq.n	800255c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	2b02      	cmp	r3, #2
 8002486:	d14b      	bne.n	8002520 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002488:	4b32      	ldr	r3, [pc, #200]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a31      	ldr	r2, [pc, #196]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 800248e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002494:	f7fe fe3a 	bl	800110c <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800249c:	f7fe fe36 	bl	800110c <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e091      	b.n	80025d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ae:	4b29      	ldr	r3, [pc, #164]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69da      	ldr	r2, [r3, #28]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	019b      	lsls	r3, r3, #6
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d0:	085b      	lsrs	r3, r3, #1
 80024d2:	3b01      	subs	r3, #1
 80024d4:	041b      	lsls	r3, r3, #16
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	061b      	lsls	r3, r3, #24
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	071b      	lsls	r3, r3, #28
 80024e6:	491b      	ldr	r1, [pc, #108]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ec:	4b19      	ldr	r3, [pc, #100]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a18      	ldr	r2, [pc, #96]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 80024f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f8:	f7fe fe08 	bl	800110c <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002500:	f7fe fe04 	bl	800110c <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e05f      	b.n	80025d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002512:	4b10      	ldr	r3, [pc, #64]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0f0      	beq.n	8002500 <HAL_RCC_OscConfig+0x47c>
 800251e:	e057      	b.n	80025d0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a0b      	ldr	r2, [pc, #44]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 8002526:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800252a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7fe fdee 	bl	800110c <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002534:	f7fe fdea 	bl	800110c <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e045      	b.n	80025d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002546:	4b03      	ldr	r3, [pc, #12]	; (8002554 <HAL_RCC_OscConfig+0x4d0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x4b0>
 8002552:	e03d      	b.n	80025d0 <HAL_RCC_OscConfig+0x54c>
 8002554:	40023800 	.word	0x40023800
 8002558:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800255c:	4b1f      	ldr	r3, [pc, #124]	; (80025dc <HAL_RCC_OscConfig+0x558>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d030      	beq.n	80025cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002574:	429a      	cmp	r2, r3
 8002576:	d129      	bne.n	80025cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002582:	429a      	cmp	r2, r3
 8002584:	d122      	bne.n	80025cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800258c:	4013      	ands	r3, r2
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002592:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002594:	4293      	cmp	r3, r2
 8002596:	d119      	bne.n	80025cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a2:	085b      	lsrs	r3, r3, #1
 80025a4:	3b01      	subs	r3, #1
 80025a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d10f      	bne.n	80025cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d107      	bne.n	80025cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d001      	beq.n	80025d0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40023800 	.word	0x40023800

080025e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0d0      	b.n	800279a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025f8:	4b6a      	ldr	r3, [pc, #424]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 030f 	and.w	r3, r3, #15
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d910      	bls.n	8002628 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002606:	4b67      	ldr	r3, [pc, #412]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f023 020f 	bic.w	r2, r3, #15
 800260e:	4965      	ldr	r1, [pc, #404]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002616:	4b63      	ldr	r3, [pc, #396]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d001      	beq.n	8002628 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e0b8      	b.n	800279a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d020      	beq.n	8002676 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002640:	4b59      	ldr	r3, [pc, #356]	; (80027a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	4a58      	ldr	r2, [pc, #352]	; (80027a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002646:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800264a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002658:	4b53      	ldr	r3, [pc, #332]	; (80027a8 <HAL_RCC_ClockConfig+0x1c8>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	4a52      	ldr	r2, [pc, #328]	; (80027a8 <HAL_RCC_ClockConfig+0x1c8>)
 800265e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002662:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002664:	4b50      	ldr	r3, [pc, #320]	; (80027a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	494d      	ldr	r1, [pc, #308]	; (80027a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002672:	4313      	orrs	r3, r2
 8002674:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d040      	beq.n	8002704 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d107      	bne.n	800269a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268a:	4b47      	ldr	r3, [pc, #284]	; (80027a8 <HAL_RCC_ClockConfig+0x1c8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d115      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e07f      	b.n	800279a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d107      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a2:	4b41      	ldr	r3, [pc, #260]	; (80027a8 <HAL_RCC_ClockConfig+0x1c8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d109      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e073      	b.n	800279a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b2:	4b3d      	ldr	r3, [pc, #244]	; (80027a8 <HAL_RCC_ClockConfig+0x1c8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e06b      	b.n	800279a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026c2:	4b39      	ldr	r3, [pc, #228]	; (80027a8 <HAL_RCC_ClockConfig+0x1c8>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f023 0203 	bic.w	r2, r3, #3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	4936      	ldr	r1, [pc, #216]	; (80027a8 <HAL_RCC_ClockConfig+0x1c8>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026d4:	f7fe fd1a 	bl	800110c <HAL_GetTick>
 80026d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026da:	e00a      	b.n	80026f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026dc:	f7fe fd16 	bl	800110c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e053      	b.n	800279a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f2:	4b2d      	ldr	r3, [pc, #180]	; (80027a8 <HAL_RCC_ClockConfig+0x1c8>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 020c 	and.w	r2, r3, #12
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	429a      	cmp	r2, r3
 8002702:	d1eb      	bne.n	80026dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002704:	4b27      	ldr	r3, [pc, #156]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 030f 	and.w	r3, r3, #15
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d210      	bcs.n	8002734 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002712:	4b24      	ldr	r3, [pc, #144]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f023 020f 	bic.w	r2, r3, #15
 800271a:	4922      	ldr	r1, [pc, #136]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	4313      	orrs	r3, r2
 8002720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002722:	4b20      	ldr	r3, [pc, #128]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e032      	b.n	800279a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b00      	cmp	r3, #0
 800273e:	d008      	beq.n	8002752 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002740:	4b19      	ldr	r3, [pc, #100]	; (80027a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4916      	ldr	r1, [pc, #88]	; (80027a8 <HAL_RCC_ClockConfig+0x1c8>)
 800274e:	4313      	orrs	r3, r2
 8002750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b00      	cmp	r3, #0
 800275c:	d009      	beq.n	8002772 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800275e:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	490e      	ldr	r1, [pc, #56]	; (80027a8 <HAL_RCC_ClockConfig+0x1c8>)
 800276e:	4313      	orrs	r3, r2
 8002770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002772:	f000 f821 	bl	80027b8 <HAL_RCC_GetSysClockFreq>
 8002776:	4602      	mov	r2, r0
 8002778:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <HAL_RCC_ClockConfig+0x1c8>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	091b      	lsrs	r3, r3, #4
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	490a      	ldr	r1, [pc, #40]	; (80027ac <HAL_RCC_ClockConfig+0x1cc>)
 8002784:	5ccb      	ldrb	r3, [r1, r3]
 8002786:	fa22 f303 	lsr.w	r3, r2, r3
 800278a:	4a09      	ldr	r2, [pc, #36]	; (80027b0 <HAL_RCC_ClockConfig+0x1d0>)
 800278c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <HAL_RCC_ClockConfig+0x1d4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe fc76 	bl	8001084 <HAL_InitTick>

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40023c00 	.word	0x40023c00
 80027a8:	40023800 	.word	0x40023800
 80027ac:	080038ec 	.word	0x080038ec
 80027b0:	20000010 	.word	0x20000010
 80027b4:	20000014 	.word	0x20000014

080027b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027bc:	b094      	sub	sp, #80	; 0x50
 80027be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	647b      	str	r3, [r7, #68]	; 0x44
 80027c4:	2300      	movs	r3, #0
 80027c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027c8:	2300      	movs	r3, #0
 80027ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027d0:	4b79      	ldr	r3, [pc, #484]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 030c 	and.w	r3, r3, #12
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d00d      	beq.n	80027f8 <HAL_RCC_GetSysClockFreq+0x40>
 80027dc:	2b08      	cmp	r3, #8
 80027de:	f200 80e1 	bhi.w	80029a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <HAL_RCC_GetSysClockFreq+0x34>
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	d003      	beq.n	80027f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80027ea:	e0db      	b.n	80029a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027ec:	4b73      	ldr	r3, [pc, #460]	; (80029bc <HAL_RCC_GetSysClockFreq+0x204>)
 80027ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027f0:	e0db      	b.n	80029aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027f2:	4b73      	ldr	r3, [pc, #460]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80027f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027f6:	e0d8      	b.n	80029aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027f8:	4b6f      	ldr	r3, [pc, #444]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002800:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002802:	4b6d      	ldr	r3, [pc, #436]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d063      	beq.n	80028d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800280e:	4b6a      	ldr	r3, [pc, #424]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	099b      	lsrs	r3, r3, #6
 8002814:	2200      	movs	r2, #0
 8002816:	63bb      	str	r3, [r7, #56]	; 0x38
 8002818:	63fa      	str	r2, [r7, #60]	; 0x3c
 800281a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002820:	633b      	str	r3, [r7, #48]	; 0x30
 8002822:	2300      	movs	r3, #0
 8002824:	637b      	str	r3, [r7, #52]	; 0x34
 8002826:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800282a:	4622      	mov	r2, r4
 800282c:	462b      	mov	r3, r5
 800282e:	f04f 0000 	mov.w	r0, #0
 8002832:	f04f 0100 	mov.w	r1, #0
 8002836:	0159      	lsls	r1, r3, #5
 8002838:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800283c:	0150      	lsls	r0, r2, #5
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	4621      	mov	r1, r4
 8002844:	1a51      	subs	r1, r2, r1
 8002846:	6139      	str	r1, [r7, #16]
 8002848:	4629      	mov	r1, r5
 800284a:	eb63 0301 	sbc.w	r3, r3, r1
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800285c:	4659      	mov	r1, fp
 800285e:	018b      	lsls	r3, r1, #6
 8002860:	4651      	mov	r1, sl
 8002862:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002866:	4651      	mov	r1, sl
 8002868:	018a      	lsls	r2, r1, #6
 800286a:	4651      	mov	r1, sl
 800286c:	ebb2 0801 	subs.w	r8, r2, r1
 8002870:	4659      	mov	r1, fp
 8002872:	eb63 0901 	sbc.w	r9, r3, r1
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	f04f 0300 	mov.w	r3, #0
 800287e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002882:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002886:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800288a:	4690      	mov	r8, r2
 800288c:	4699      	mov	r9, r3
 800288e:	4623      	mov	r3, r4
 8002890:	eb18 0303 	adds.w	r3, r8, r3
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	462b      	mov	r3, r5
 8002898:	eb49 0303 	adc.w	r3, r9, r3
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028aa:	4629      	mov	r1, r5
 80028ac:	024b      	lsls	r3, r1, #9
 80028ae:	4621      	mov	r1, r4
 80028b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028b4:	4621      	mov	r1, r4
 80028b6:	024a      	lsls	r2, r1, #9
 80028b8:	4610      	mov	r0, r2
 80028ba:	4619      	mov	r1, r3
 80028bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028be:	2200      	movs	r2, #0
 80028c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80028c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028c8:	f7fd fcb6 	bl	8000238 <__aeabi_uldivmod>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4613      	mov	r3, r2
 80028d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028d4:	e058      	b.n	8002988 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028d6:	4b38      	ldr	r3, [pc, #224]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	099b      	lsrs	r3, r3, #6
 80028dc:	2200      	movs	r2, #0
 80028de:	4618      	mov	r0, r3
 80028e0:	4611      	mov	r1, r2
 80028e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028e6:	623b      	str	r3, [r7, #32]
 80028e8:	2300      	movs	r3, #0
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24
 80028ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028f0:	4642      	mov	r2, r8
 80028f2:	464b      	mov	r3, r9
 80028f4:	f04f 0000 	mov.w	r0, #0
 80028f8:	f04f 0100 	mov.w	r1, #0
 80028fc:	0159      	lsls	r1, r3, #5
 80028fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002902:	0150      	lsls	r0, r2, #5
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4641      	mov	r1, r8
 800290a:	ebb2 0a01 	subs.w	sl, r2, r1
 800290e:	4649      	mov	r1, r9
 8002910:	eb63 0b01 	sbc.w	fp, r3, r1
 8002914:	f04f 0200 	mov.w	r2, #0
 8002918:	f04f 0300 	mov.w	r3, #0
 800291c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002920:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002924:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002928:	ebb2 040a 	subs.w	r4, r2, sl
 800292c:	eb63 050b 	sbc.w	r5, r3, fp
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	00eb      	lsls	r3, r5, #3
 800293a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800293e:	00e2      	lsls	r2, r4, #3
 8002940:	4614      	mov	r4, r2
 8002942:	461d      	mov	r5, r3
 8002944:	4643      	mov	r3, r8
 8002946:	18e3      	adds	r3, r4, r3
 8002948:	603b      	str	r3, [r7, #0]
 800294a:	464b      	mov	r3, r9
 800294c:	eb45 0303 	adc.w	r3, r5, r3
 8002950:	607b      	str	r3, [r7, #4]
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800295e:	4629      	mov	r1, r5
 8002960:	028b      	lsls	r3, r1, #10
 8002962:	4621      	mov	r1, r4
 8002964:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002968:	4621      	mov	r1, r4
 800296a:	028a      	lsls	r2, r1, #10
 800296c:	4610      	mov	r0, r2
 800296e:	4619      	mov	r1, r3
 8002970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002972:	2200      	movs	r2, #0
 8002974:	61bb      	str	r3, [r7, #24]
 8002976:	61fa      	str	r2, [r7, #28]
 8002978:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800297c:	f7fd fc5c 	bl	8000238 <__aeabi_uldivmod>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	4613      	mov	r3, r2
 8002986:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002988:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	0c1b      	lsrs	r3, r3, #16
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	3301      	adds	r3, #1
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002998:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800299a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800299c:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029a2:	e002      	b.n	80029aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029a4:	4b05      	ldr	r3, [pc, #20]	; (80029bc <HAL_RCC_GetSysClockFreq+0x204>)
 80029a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3750      	adds	r7, #80	; 0x50
 80029b0:	46bd      	mov	sp, r7
 80029b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029b6:	bf00      	nop
 80029b8:	40023800 	.word	0x40023800
 80029bc:	00f42400 	.word	0x00f42400
 80029c0:	007a1200 	.word	0x007a1200

080029c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e049      	b.n	8002a6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d106      	bne.n	80029f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7fe fae2 	bl	8000fb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3304      	adds	r3, #4
 8002a00:	4619      	mov	r1, r3
 8002a02:	4610      	mov	r0, r2
 8002a04:	f000 f970 	bl	8002ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d001      	beq.n	8002a8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e04c      	b.n	8002b26 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a26      	ldr	r2, [pc, #152]	; (8002b34 <HAL_TIM_Base_Start+0xc0>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d022      	beq.n	8002ae4 <HAL_TIM_Base_Start+0x70>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa6:	d01d      	beq.n	8002ae4 <HAL_TIM_Base_Start+0x70>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a22      	ldr	r2, [pc, #136]	; (8002b38 <HAL_TIM_Base_Start+0xc4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d018      	beq.n	8002ae4 <HAL_TIM_Base_Start+0x70>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a21      	ldr	r2, [pc, #132]	; (8002b3c <HAL_TIM_Base_Start+0xc8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d013      	beq.n	8002ae4 <HAL_TIM_Base_Start+0x70>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a1f      	ldr	r2, [pc, #124]	; (8002b40 <HAL_TIM_Base_Start+0xcc>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d00e      	beq.n	8002ae4 <HAL_TIM_Base_Start+0x70>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a1e      	ldr	r2, [pc, #120]	; (8002b44 <HAL_TIM_Base_Start+0xd0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d009      	beq.n	8002ae4 <HAL_TIM_Base_Start+0x70>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a1c      	ldr	r2, [pc, #112]	; (8002b48 <HAL_TIM_Base_Start+0xd4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d004      	beq.n	8002ae4 <HAL_TIM_Base_Start+0x70>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1b      	ldr	r2, [pc, #108]	; (8002b4c <HAL_TIM_Base_Start+0xd8>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d115      	bne.n	8002b10 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <HAL_TIM_Base_Start+0xdc>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2b06      	cmp	r3, #6
 8002af4:	d015      	beq.n	8002b22 <HAL_TIM_Base_Start+0xae>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002afc:	d011      	beq.n	8002b22 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 0201 	orr.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b0e:	e008      	b.n	8002b22 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	e000      	b.n	8002b24 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40010000 	.word	0x40010000
 8002b38:	40000400 	.word	0x40000400
 8002b3c:	40000800 	.word	0x40000800
 8002b40:	40000c00 	.word	0x40000c00
 8002b44:	40010400 	.word	0x40010400
 8002b48:	40014000 	.word	0x40014000
 8002b4c:	40001800 	.word	0x40001800
 8002b50:	00010007 	.word	0x00010007

08002b54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <HAL_TIM_ConfigClockSource+0x1c>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e0b4      	b.n	8002cda <HAL_TIM_ConfigClockSource+0x186>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	4b56      	ldr	r3, [pc, #344]	; (8002ce4 <HAL_TIM_ConfigClockSource+0x190>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ba8:	d03e      	beq.n	8002c28 <HAL_TIM_ConfigClockSource+0xd4>
 8002baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bae:	f200 8087 	bhi.w	8002cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb6:	f000 8086 	beq.w	8002cc6 <HAL_TIM_ConfigClockSource+0x172>
 8002bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bbe:	d87f      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bc0:	2b70      	cmp	r3, #112	; 0x70
 8002bc2:	d01a      	beq.n	8002bfa <HAL_TIM_ConfigClockSource+0xa6>
 8002bc4:	2b70      	cmp	r3, #112	; 0x70
 8002bc6:	d87b      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bc8:	2b60      	cmp	r3, #96	; 0x60
 8002bca:	d050      	beq.n	8002c6e <HAL_TIM_ConfigClockSource+0x11a>
 8002bcc:	2b60      	cmp	r3, #96	; 0x60
 8002bce:	d877      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bd0:	2b50      	cmp	r3, #80	; 0x50
 8002bd2:	d03c      	beq.n	8002c4e <HAL_TIM_ConfigClockSource+0xfa>
 8002bd4:	2b50      	cmp	r3, #80	; 0x50
 8002bd6:	d873      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bd8:	2b40      	cmp	r3, #64	; 0x40
 8002bda:	d058      	beq.n	8002c8e <HAL_TIM_ConfigClockSource+0x13a>
 8002bdc:	2b40      	cmp	r3, #64	; 0x40
 8002bde:	d86f      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002be0:	2b30      	cmp	r3, #48	; 0x30
 8002be2:	d064      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x15a>
 8002be4:	2b30      	cmp	r3, #48	; 0x30
 8002be6:	d86b      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002be8:	2b20      	cmp	r3, #32
 8002bea:	d060      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x15a>
 8002bec:	2b20      	cmp	r3, #32
 8002bee:	d867      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d05c      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x15a>
 8002bf4:	2b10      	cmp	r3, #16
 8002bf6:	d05a      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x15a>
 8002bf8:	e062      	b.n	8002cc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	6899      	ldr	r1, [r3, #8]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f000 f987 	bl	8002f1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	609a      	str	r2, [r3, #8]
      break;
 8002c26:	e04f      	b.n	8002cc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6818      	ldr	r0, [r3, #0]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	6899      	ldr	r1, [r3, #8]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f000 f970 	bl	8002f1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c4a:	609a      	str	r2, [r3, #8]
      break;
 8002c4c:	e03c      	b.n	8002cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	6859      	ldr	r1, [r3, #4]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	f000 f8e4 	bl	8002e28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2150      	movs	r1, #80	; 0x50
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 f93d 	bl	8002ee6 <TIM_ITRx_SetConfig>
      break;
 8002c6c:	e02c      	b.n	8002cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	6859      	ldr	r1, [r3, #4]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f000 f903 	bl	8002e86 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2160      	movs	r1, #96	; 0x60
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 f92d 	bl	8002ee6 <TIM_ITRx_SetConfig>
      break;
 8002c8c:	e01c      	b.n	8002cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6859      	ldr	r1, [r3, #4]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f000 f8c4 	bl	8002e28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2140      	movs	r1, #64	; 0x40
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 f91d 	bl	8002ee6 <TIM_ITRx_SetConfig>
      break;
 8002cac:	e00c      	b.n	8002cc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4610      	mov	r0, r2
 8002cba:	f000 f914 	bl	8002ee6 <TIM_ITRx_SetConfig>
      break;
 8002cbe:	e003      	b.n	8002cc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc4:	e000      	b.n	8002cc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002cc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	fffeff88 	.word	0xfffeff88

08002ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a40      	ldr	r2, [pc, #256]	; (8002dfc <TIM_Base_SetConfig+0x114>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d013      	beq.n	8002d28 <TIM_Base_SetConfig+0x40>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d06:	d00f      	beq.n	8002d28 <TIM_Base_SetConfig+0x40>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a3d      	ldr	r2, [pc, #244]	; (8002e00 <TIM_Base_SetConfig+0x118>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d00b      	beq.n	8002d28 <TIM_Base_SetConfig+0x40>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a3c      	ldr	r2, [pc, #240]	; (8002e04 <TIM_Base_SetConfig+0x11c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d007      	beq.n	8002d28 <TIM_Base_SetConfig+0x40>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a3b      	ldr	r2, [pc, #236]	; (8002e08 <TIM_Base_SetConfig+0x120>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d003      	beq.n	8002d28 <TIM_Base_SetConfig+0x40>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a3a      	ldr	r2, [pc, #232]	; (8002e0c <TIM_Base_SetConfig+0x124>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d108      	bne.n	8002d3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a2f      	ldr	r2, [pc, #188]	; (8002dfc <TIM_Base_SetConfig+0x114>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d02b      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d48:	d027      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a2c      	ldr	r2, [pc, #176]	; (8002e00 <TIM_Base_SetConfig+0x118>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d023      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a2b      	ldr	r2, [pc, #172]	; (8002e04 <TIM_Base_SetConfig+0x11c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d01f      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a2a      	ldr	r2, [pc, #168]	; (8002e08 <TIM_Base_SetConfig+0x120>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d01b      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a29      	ldr	r2, [pc, #164]	; (8002e0c <TIM_Base_SetConfig+0x124>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d017      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a28      	ldr	r2, [pc, #160]	; (8002e10 <TIM_Base_SetConfig+0x128>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d013      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a27      	ldr	r2, [pc, #156]	; (8002e14 <TIM_Base_SetConfig+0x12c>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00f      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a26      	ldr	r2, [pc, #152]	; (8002e18 <TIM_Base_SetConfig+0x130>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d00b      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a25      	ldr	r2, [pc, #148]	; (8002e1c <TIM_Base_SetConfig+0x134>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d007      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a24      	ldr	r2, [pc, #144]	; (8002e20 <TIM_Base_SetConfig+0x138>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d003      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a23      	ldr	r2, [pc, #140]	; (8002e24 <TIM_Base_SetConfig+0x13c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d108      	bne.n	8002dac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a0a      	ldr	r2, [pc, #40]	; (8002dfc <TIM_Base_SetConfig+0x114>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d003      	beq.n	8002de0 <TIM_Base_SetConfig+0xf8>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a0c      	ldr	r2, [pc, #48]	; (8002e0c <TIM_Base_SetConfig+0x124>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d103      	bne.n	8002de8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	615a      	str	r2, [r3, #20]
}
 8002dee:	bf00      	nop
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40010000 	.word	0x40010000
 8002e00:	40000400 	.word	0x40000400
 8002e04:	40000800 	.word	0x40000800
 8002e08:	40000c00 	.word	0x40000c00
 8002e0c:	40010400 	.word	0x40010400
 8002e10:	40014000 	.word	0x40014000
 8002e14:	40014400 	.word	0x40014400
 8002e18:	40014800 	.word	0x40014800
 8002e1c:	40001800 	.word	0x40001800
 8002e20:	40001c00 	.word	0x40001c00
 8002e24:	40002000 	.word	0x40002000

08002e28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	f023 0201 	bic.w	r2, r3, #1
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f023 030a 	bic.w	r3, r3, #10
 8002e64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	621a      	str	r2, [r3, #32]
}
 8002e7a:	bf00      	nop
 8002e7c:	371c      	adds	r7, #28
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b087      	sub	sp, #28
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	60f8      	str	r0, [r7, #12]
 8002e8e:	60b9      	str	r1, [r7, #8]
 8002e90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	f023 0210 	bic.w	r2, r3, #16
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002eb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	031b      	lsls	r3, r3, #12
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ec2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	011b      	lsls	r3, r3, #4
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	621a      	str	r2, [r3, #32]
}
 8002eda:	bf00      	nop
 8002edc:	371c      	adds	r7, #28
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b085      	sub	sp, #20
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f043 0307 	orr.w	r3, r3, #7
 8002f08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	609a      	str	r2, [r3, #8]
}
 8002f10:	bf00      	nop
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
 8002f28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	021a      	lsls	r2, r3, #8
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	609a      	str	r2, [r3, #8]
}
 8002f50:	bf00      	nop
 8002f52:	371c      	adds	r7, #28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e06d      	b.n	8003050 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a30      	ldr	r2, [pc, #192]	; (800305c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d004      	beq.n	8002fa8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a2f      	ldr	r2, [pc, #188]	; (8003060 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d108      	bne.n	8002fba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002fae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a20      	ldr	r2, [pc, #128]	; (800305c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d022      	beq.n	8003024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe6:	d01d      	beq.n	8003024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a1d      	ldr	r2, [pc, #116]	; (8003064 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d018      	beq.n	8003024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a1c      	ldr	r2, [pc, #112]	; (8003068 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d013      	beq.n	8003024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a1a      	ldr	r2, [pc, #104]	; (800306c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d00e      	beq.n	8003024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a15      	ldr	r2, [pc, #84]	; (8003060 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d009      	beq.n	8003024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a16      	ldr	r2, [pc, #88]	; (8003070 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d004      	beq.n	8003024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a15      	ldr	r2, [pc, #84]	; (8003074 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d10c      	bne.n	800303e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800302a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	4313      	orrs	r3, r2
 8003034:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	40010000 	.word	0x40010000
 8003060:	40010400 	.word	0x40010400
 8003064:	40000400 	.word	0x40000400
 8003068:	40000800 	.word	0x40000800
 800306c:	40000c00 	.word	0x40000c00
 8003070:	40014000 	.word	0x40014000
 8003074:	40001800 	.word	0x40001800

08003078 <__errno>:
 8003078:	4b01      	ldr	r3, [pc, #4]	; (8003080 <__errno+0x8>)
 800307a:	6818      	ldr	r0, [r3, #0]
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	2000001c 	.word	0x2000001c

08003084 <__libc_init_array>:
 8003084:	b570      	push	{r4, r5, r6, lr}
 8003086:	4d0d      	ldr	r5, [pc, #52]	; (80030bc <__libc_init_array+0x38>)
 8003088:	4c0d      	ldr	r4, [pc, #52]	; (80030c0 <__libc_init_array+0x3c>)
 800308a:	1b64      	subs	r4, r4, r5
 800308c:	10a4      	asrs	r4, r4, #2
 800308e:	2600      	movs	r6, #0
 8003090:	42a6      	cmp	r6, r4
 8003092:	d109      	bne.n	80030a8 <__libc_init_array+0x24>
 8003094:	4d0b      	ldr	r5, [pc, #44]	; (80030c4 <__libc_init_array+0x40>)
 8003096:	4c0c      	ldr	r4, [pc, #48]	; (80030c8 <__libc_init_array+0x44>)
 8003098:	f000 fc10 	bl	80038bc <_init>
 800309c:	1b64      	subs	r4, r4, r5
 800309e:	10a4      	asrs	r4, r4, #2
 80030a0:	2600      	movs	r6, #0
 80030a2:	42a6      	cmp	r6, r4
 80030a4:	d105      	bne.n	80030b2 <__libc_init_array+0x2e>
 80030a6:	bd70      	pop	{r4, r5, r6, pc}
 80030a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ac:	4798      	blx	r3
 80030ae:	3601      	adds	r6, #1
 80030b0:	e7ee      	b.n	8003090 <__libc_init_array+0xc>
 80030b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80030b6:	4798      	blx	r3
 80030b8:	3601      	adds	r6, #1
 80030ba:	e7f2      	b.n	80030a2 <__libc_init_array+0x1e>
 80030bc:	08005a50 	.word	0x08005a50
 80030c0:	08005a50 	.word	0x08005a50
 80030c4:	08005a50 	.word	0x08005a50
 80030c8:	08005a54 	.word	0x08005a54

080030cc <memset>:
 80030cc:	4402      	add	r2, r0
 80030ce:	4603      	mov	r3, r0
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d100      	bne.n	80030d6 <memset+0xa>
 80030d4:	4770      	bx	lr
 80030d6:	f803 1b01 	strb.w	r1, [r3], #1
 80030da:	e7f9      	b.n	80030d0 <memset+0x4>
 80030dc:	0000      	movs	r0, r0
	...

080030e0 <log>:
 80030e0:	b470      	push	{r4, r5, r6}
 80030e2:	ee10 1a90 	vmov	r1, s1
 80030e6:	ee10 2a10 	vmov	r2, s0
 80030ea:	f04f 34ff 	mov.w	r4, #4294967295
 80030ee:	4294      	cmp	r4, r2
 80030f0:	f101 4040 	add.w	r0, r1, #3221225472	; 0xc0000000
 80030f4:	4c72      	ldr	r4, [pc, #456]	; (80032c0 <log+0x1e0>)
 80030f6:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000
 80030fa:	eb74 0000 	sbcs.w	r0, r4, r0
 80030fe:	ed2d 8b02 	vpush	{d8}
 8003102:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8003106:	d35c      	bcc.n	80031c2 <log+0xe2>
 8003108:	4b6e      	ldr	r3, [pc, #440]	; (80032c4 <log+0x1e4>)
 800310a:	4299      	cmp	r1, r3
 800310c:	bf08      	it	eq
 800310e:	2a00      	cmpeq	r2, #0
 8003110:	f000 80c6 	beq.w	80032a0 <log+0x1c0>
 8003114:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8003118:	ee30 0b47 	vsub.f64	d0, d0, d7
 800311c:	4b6a      	ldr	r3, [pc, #424]	; (80032c8 <log+0x1e8>)
 800311e:	ee20 2b00 	vmul.f64	d2, d0, d0
 8003122:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8003126:	ee20 4b02 	vmul.f64	d4, d0, d2
 800312a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800312e:	eea6 7b00 	vfma.f64	d7, d6, d0
 8003132:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8003136:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 800313a:	eea6 7b02 	vfma.f64	d7, d6, d2
 800313e:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8003142:	eea5 6b00 	vfma.f64	d6, d5, d0
 8003146:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 800314a:	ed93 3b1e 	vldr	d3, [r3, #120]	; 0x78
 800314e:	eea5 6b02 	vfma.f64	d6, d5, d2
 8003152:	ed93 5b1c 	vldr	d5, [r3, #112]	; 0x70
 8003156:	eea3 5b00 	vfma.f64	d5, d3, d0
 800315a:	ed93 3b20 	vldr	d3, [r3, #128]	; 0x80
 800315e:	eea3 5b02 	vfma.f64	d5, d3, d2
 8003162:	ed93 3b22 	vldr	d3, [r3, #136]	; 0x88
 8003166:	eeb0 2b40 	vmov.f64	d2, d0
 800316a:	eea3 5b04 	vfma.f64	d5, d3, d4
 800316e:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8003172:	eea5 6b04 	vfma.f64	d6, d5, d4
 8003176:	eea6 7b04 	vfma.f64	d7, d6, d4
 800317a:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 80032a8 <log+0x1c8>
 800317e:	eeb0 1b47 	vmov.f64	d1, d7
 8003182:	eeb0 5b40 	vmov.f64	d5, d0
 8003186:	eea0 5b06 	vfma.f64	d5, d0, d6
 800318a:	eea0 5b46 	vfms.f64	d5, d0, d6
 800318e:	ee30 8b45 	vsub.f64	d8, d0, d5
 8003192:	ee25 7b05 	vmul.f64	d7, d5, d5
 8003196:	ee30 5b05 	vadd.f64	d5, d0, d5
 800319a:	eea7 2b03 	vfma.f64	d2, d7, d3
 800319e:	ee30 6b42 	vsub.f64	d6, d0, d2
 80031a2:	eea7 6b03 	vfma.f64	d6, d7, d3
 80031a6:	ee23 3b08 	vmul.f64	d3, d3, d8
 80031aa:	eea3 6b05 	vfma.f64	d6, d3, d5
 80031ae:	eeb0 0b46 	vmov.f64	d0, d6
 80031b2:	eea1 0b04 	vfma.f64	d0, d1, d4
 80031b6:	ee32 0b00 	vadd.f64	d0, d2, d0
 80031ba:	ecbd 8b02 	vpop	{d8}
 80031be:	bc70      	pop	{r4, r5, r6}
 80031c0:	4770      	bx	lr
 80031c2:	f1a3 0410 	sub.w	r4, r3, #16
 80031c6:	f647 70df 	movw	r0, #32735	; 0x7fdf
 80031ca:	4284      	cmp	r4, r0
 80031cc:	d923      	bls.n	8003216 <log+0x136>
 80031ce:	1894      	adds	r4, r2, r2
 80031d0:	eb41 0001 	adc.w	r0, r1, r1
 80031d4:	4320      	orrs	r0, r4
 80031d6:	d105      	bne.n	80031e4 <log+0x104>
 80031d8:	ecbd 8b02 	vpop	{d8}
 80031dc:	2001      	movs	r0, #1
 80031de:	bc70      	pop	{r4, r5, r6}
 80031e0:	f000 b8a2 	b.w	8003328 <__math_divzero>
 80031e4:	4839      	ldr	r0, [pc, #228]	; (80032cc <log+0x1ec>)
 80031e6:	4281      	cmp	r1, r0
 80031e8:	bf08      	it	eq
 80031ea:	2a00      	cmpeq	r2, #0
 80031ec:	d0e5      	beq.n	80031ba <log+0xda>
 80031ee:	041a      	lsls	r2, r3, #16
 80031f0:	d404      	bmi.n	80031fc <log+0x11c>
 80031f2:	f647 72f0 	movw	r2, #32752	; 0x7ff0
 80031f6:	ea32 0303 	bics.w	r3, r2, r3
 80031fa:	d104      	bne.n	8003206 <log+0x126>
 80031fc:	ecbd 8b02 	vpop	{d8}
 8003200:	bc70      	pop	{r4, r5, r6}
 8003202:	f000 b8a9 	b.w	8003358 <__math_invalid>
 8003206:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 80032b0 <log+0x1d0>
 800320a:	ee20 7b07 	vmul.f64	d7, d0, d7
 800320e:	ec53 2b17 	vmov	r2, r3, d7
 8003212:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 8003216:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 800321a:	f503 13d0 	add.w	r3, r3, #1703936	; 0x1a0000
 800321e:	0d1e      	lsrs	r6, r3, #20
 8003220:	1e14      	subs	r4, r2, #0
 8003222:	4a29      	ldr	r2, [pc, #164]	; (80032c8 <log+0x1e8>)
 8003224:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8003228:	f3c3 3046 	ubfx	r0, r3, #13, #7
 800322c:	0536      	lsls	r6, r6, #20
 800322e:	1b8d      	subs	r5, r1, r6
 8003230:	eb02 1100 	add.w	r1, r2, r0, lsl #4
 8003234:	ed91 7b24 	vldr	d7, [r1, #144]	; 0x90
 8003238:	ec45 4b16 	vmov	d6, r4, r5
 800323c:	151b      	asrs	r3, r3, #20
 800323e:	eea6 5b07 	vfma.f64	d5, d6, d7
 8003242:	ee07 3a90 	vmov	s15, r3
 8003246:	ee25 2b05 	vmul.f64	d2, d5, d5
 800324a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800324e:	ed92 4b00 	vldr	d4, [r2]
 8003252:	ee25 1b02 	vmul.f64	d1, d5, d2
 8003256:	ed91 7b26 	vldr	d7, [r1, #152]	; 0x98
 800325a:	eea4 7b06 	vfma.f64	d7, d4, d6
 800325e:	ee35 4b07 	vadd.f64	d4, d5, d7
 8003262:	ee37 0b44 	vsub.f64	d0, d7, d4
 8003266:	ed92 7b02 	vldr	d7, [r2, #8]
 800326a:	ee30 0b05 	vadd.f64	d0, d0, d5
 800326e:	eea7 0b06 	vfma.f64	d0, d7, d6
 8003272:	ed92 7b04 	vldr	d7, [r2, #16]
 8003276:	ed92 6b08 	vldr	d6, [r2, #32]
 800327a:	eea7 0b02 	vfma.f64	d0, d7, d2
 800327e:	ed92 7b06 	vldr	d7, [r2, #24]
 8003282:	ed92 3b0c 	vldr	d3, [r2, #48]	; 0x30
 8003286:	eea6 7b05 	vfma.f64	d7, d6, d5
 800328a:	ed92 6b0a 	vldr	d6, [r2, #40]	; 0x28
 800328e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8003292:	eea6 7b02 	vfma.f64	d7, d6, d2
 8003296:	eea1 0b07 	vfma.f64	d0, d1, d7
 800329a:	ee30 0b04 	vadd.f64	d0, d0, d4
 800329e:	e78c      	b.n	80031ba <log+0xda>
 80032a0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80032b8 <log+0x1d8>
 80032a4:	e789      	b.n	80031ba <log+0xda>
 80032a6:	bf00      	nop
 80032a8:	00000000 	.word	0x00000000
 80032ac:	41a00000 	.word	0x41a00000
 80032b0:	00000000 	.word	0x00000000
 80032b4:	43300000 	.word	0x43300000
	...
 80032c0:	000308ff 	.word	0x000308ff
 80032c4:	3ff00000 	.word	0x3ff00000
 80032c8:	08003900 	.word	0x08003900
 80032cc:	7ff00000 	.word	0x7ff00000

080032d0 <with_errno>:
 80032d0:	b513      	push	{r0, r1, r4, lr}
 80032d2:	4604      	mov	r4, r0
 80032d4:	ed8d 0b00 	vstr	d0, [sp]
 80032d8:	f7ff fece 	bl	8003078 <__errno>
 80032dc:	ed9d 0b00 	vldr	d0, [sp]
 80032e0:	6004      	str	r4, [r0, #0]
 80032e2:	b002      	add	sp, #8
 80032e4:	bd10      	pop	{r4, pc}

080032e6 <xflow>:
 80032e6:	b082      	sub	sp, #8
 80032e8:	b158      	cbz	r0, 8003302 <xflow+0x1c>
 80032ea:	eeb1 7b40 	vneg.f64	d7, d0
 80032ee:	ed8d 7b00 	vstr	d7, [sp]
 80032f2:	ed9d 7b00 	vldr	d7, [sp]
 80032f6:	2022      	movs	r0, #34	; 0x22
 80032f8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80032fc:	b002      	add	sp, #8
 80032fe:	f7ff bfe7 	b.w	80032d0 <with_errno>
 8003302:	eeb0 7b40 	vmov.f64	d7, d0
 8003306:	e7f2      	b.n	80032ee <xflow+0x8>

08003308 <__math_uflow>:
 8003308:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8003310 <__math_uflow+0x8>
 800330c:	f7ff bfeb 	b.w	80032e6 <xflow>
 8003310:	00000000 	.word	0x00000000
 8003314:	10000000 	.word	0x10000000

08003318 <__math_oflow>:
 8003318:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8003320 <__math_oflow+0x8>
 800331c:	f7ff bfe3 	b.w	80032e6 <xflow>
 8003320:	00000000 	.word	0x00000000
 8003324:	70000000 	.word	0x70000000

08003328 <__math_divzero>:
 8003328:	b082      	sub	sp, #8
 800332a:	2800      	cmp	r0, #0
 800332c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003330:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8003334:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8003338:	ed8d 7b00 	vstr	d7, [sp]
 800333c:	ed9d 0b00 	vldr	d0, [sp]
 8003340:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8003350 <__math_divzero+0x28>
 8003344:	2022      	movs	r0, #34	; 0x22
 8003346:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800334a:	b002      	add	sp, #8
 800334c:	f7ff bfc0 	b.w	80032d0 <with_errno>
	...

08003358 <__math_invalid>:
 8003358:	eeb0 7b40 	vmov.f64	d7, d0
 800335c:	eeb4 7b47 	vcmp.f64	d7, d7
 8003360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003364:	ee30 6b40 	vsub.f64	d6, d0, d0
 8003368:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800336c:	d602      	bvs.n	8003374 <__math_invalid+0x1c>
 800336e:	2021      	movs	r0, #33	; 0x21
 8003370:	f7ff bfae 	b.w	80032d0 <with_errno>
 8003374:	4770      	bx	lr

08003376 <__math_check_uflow>:
 8003376:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800337a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800337e:	d102      	bne.n	8003386 <__math_check_uflow+0x10>
 8003380:	2022      	movs	r0, #34	; 0x22
 8003382:	f7ff bfa5 	b.w	80032d0 <with_errno>
 8003386:	4770      	bx	lr

08003388 <__math_check_oflow>:
 8003388:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80033a8 <__math_check_oflow+0x20>
 800338c:	eeb0 7bc0 	vabs.f64	d7, d0
 8003390:	eeb4 7b46 	vcmp.f64	d7, d6
 8003394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003398:	dd02      	ble.n	80033a0 <__math_check_oflow+0x18>
 800339a:	2022      	movs	r0, #34	; 0x22
 800339c:	f7ff bf98 	b.w	80032d0 <with_errno>
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	f3af 8000 	nop.w
 80033a8:	ffffffff 	.word	0xffffffff
 80033ac:	7fefffff 	.word	0x7fefffff

080033b0 <checkint>:
 80033b0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80033b4:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80033b8:	429a      	cmp	r2, r3
 80033ba:	b570      	push	{r4, r5, r6, lr}
 80033bc:	dd2a      	ble.n	8003414 <checkint+0x64>
 80033be:	f240 4333 	movw	r3, #1075	; 0x433
 80033c2:	429a      	cmp	r2, r3
 80033c4:	dc24      	bgt.n	8003410 <checkint+0x60>
 80033c6:	1a9b      	subs	r3, r3, r2
 80033c8:	f1a3 0620 	sub.w	r6, r3, #32
 80033cc:	f04f 32ff 	mov.w	r2, #4294967295
 80033d0:	fa02 f403 	lsl.w	r4, r2, r3
 80033d4:	fa02 f606 	lsl.w	r6, r2, r6
 80033d8:	f1c3 0520 	rsb	r5, r3, #32
 80033dc:	fa22 f505 	lsr.w	r5, r2, r5
 80033e0:	4334      	orrs	r4, r6
 80033e2:	432c      	orrs	r4, r5
 80033e4:	409a      	lsls	r2, r3
 80033e6:	ea20 0202 	bic.w	r2, r0, r2
 80033ea:	ea21 0404 	bic.w	r4, r1, r4
 80033ee:	4322      	orrs	r2, r4
 80033f0:	f1a3 0420 	sub.w	r4, r3, #32
 80033f4:	f1c3 0220 	rsb	r2, r3, #32
 80033f8:	d10c      	bne.n	8003414 <checkint+0x64>
 80033fa:	40d8      	lsrs	r0, r3
 80033fc:	fa01 f302 	lsl.w	r3, r1, r2
 8003400:	4318      	orrs	r0, r3
 8003402:	40e1      	lsrs	r1, r4
 8003404:	4308      	orrs	r0, r1
 8003406:	f000 0001 	and.w	r0, r0, #1
 800340a:	f1d0 0002 	rsbs	r0, r0, #2
 800340e:	bd70      	pop	{r4, r5, r6, pc}
 8003410:	2002      	movs	r0, #2
 8003412:	e7fc      	b.n	800340e <checkint+0x5e>
 8003414:	2000      	movs	r0, #0
 8003416:	e7fa      	b.n	800340e <checkint+0x5e>

08003418 <pow>:
 8003418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800341c:	ee10 4a90 	vmov	r4, s1
 8003420:	ed2d 8b0a 	vpush	{d8-d12}
 8003424:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8003428:	ee11 7a90 	vmov	r7, s3
 800342c:	f10a 32ff 	add.w	r2, sl, #4294967295
 8003430:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8003434:	429a      	cmp	r2, r3
 8003436:	ee10 6a10 	vmov	r6, s0
 800343a:	ee11 0a10 	vmov	r0, s2
 800343e:	b086      	sub	sp, #24
 8003440:	46d4      	mov	ip, sl
 8003442:	ea4f 5517 	mov.w	r5, r7, lsr #20
 8003446:	d806      	bhi.n	8003456 <pow+0x3e>
 8003448:	f3c5 030a 	ubfx	r3, r5, #0, #11
 800344c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8003450:	2b7f      	cmp	r3, #127	; 0x7f
 8003452:	f240 8156 	bls.w	8003702 <pow+0x2ea>
 8003456:	1802      	adds	r2, r0, r0
 8003458:	eb47 0107 	adc.w	r1, r7, r7
 800345c:	f06f 0e01 	mvn.w	lr, #1
 8003460:	f112 39ff 	adds.w	r9, r2, #4294967295
 8003464:	f141 38ff 	adc.w	r8, r1, #4294967295
 8003468:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 800346c:	45ce      	cmp	lr, r9
 800346e:	eb73 0808 	sbcs.w	r8, r3, r8
 8003472:	d23f      	bcs.n	80034f4 <pow+0xdc>
 8003474:	ea52 0301 	orrs.w	r3, r2, r1
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	d10c      	bne.n	8003498 <pow+0x80>
 800347e:	19b6      	adds	r6, r6, r6
 8003480:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8003484:	4164      	adcs	r4, r4
 8003486:	42b3      	cmp	r3, r6
 8003488:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800348c:	41a3      	sbcs	r3, r4
 800348e:	f0c0 808c 	bcc.w	80035aa <pow+0x192>
 8003492:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8003496:	e028      	b.n	80034ea <pow+0xd2>
 8003498:	4da3      	ldr	r5, [pc, #652]	; (8003728 <pow+0x310>)
 800349a:	42ac      	cmp	r4, r5
 800349c:	bf08      	it	eq
 800349e:	429e      	cmpeq	r6, r3
 80034a0:	d107      	bne.n	80034b2 <pow+0x9a>
 80034a2:	1800      	adds	r0, r0, r0
 80034a4:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 80034a8:	417f      	adcs	r7, r7
 80034aa:	4283      	cmp	r3, r0
 80034ac:	4b9f      	ldr	r3, [pc, #636]	; (800372c <pow+0x314>)
 80034ae:	41bb      	sbcs	r3, r7
 80034b0:	e7ed      	b.n	800348e <pow+0x76>
 80034b2:	19b6      	adds	r6, r6, r6
 80034b4:	489e      	ldr	r0, [pc, #632]	; (8003730 <pow+0x318>)
 80034b6:	4164      	adcs	r4, r4
 80034b8:	42b3      	cmp	r3, r6
 80034ba:	eb70 0504 	sbcs.w	r5, r0, r4
 80034be:	d374      	bcc.n	80035aa <pow+0x192>
 80034c0:	4281      	cmp	r1, r0
 80034c2:	bf08      	it	eq
 80034c4:	429a      	cmpeq	r2, r3
 80034c6:	d170      	bne.n	80035aa <pow+0x192>
 80034c8:	4a9a      	ldr	r2, [pc, #616]	; (8003734 <pow+0x31c>)
 80034ca:	4294      	cmp	r4, r2
 80034cc:	bf08      	it	eq
 80034ce:	429e      	cmpeq	r6, r3
 80034d0:	d0df      	beq.n	8003492 <pow+0x7a>
 80034d2:	4294      	cmp	r4, r2
 80034d4:	ea6f 0707 	mvn.w	r7, r7
 80034d8:	bf34      	ite	cc
 80034da:	2400      	movcc	r4, #0
 80034dc:	2401      	movcs	r4, #1
 80034de:	0fff      	lsrs	r7, r7, #31
 80034e0:	42bc      	cmp	r4, r7
 80034e2:	f040 81d9 	bne.w	8003898 <pow+0x480>
 80034e6:	ee21 0b01 	vmul.f64	d0, d1, d1
 80034ea:	b006      	add	sp, #24
 80034ec:	ecbd 8b0a 	vpop	{d8-d12}
 80034f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034f4:	eb16 0806 	adds.w	r8, r6, r6
 80034f8:	eb44 0904 	adc.w	r9, r4, r4
 80034fc:	f118 31ff 	adds.w	r1, r8, #4294967295
 8003500:	f169 0200 	sbc.w	r2, r9, #0
 8003504:	458e      	cmp	lr, r1
 8003506:	4193      	sbcs	r3, r2
 8003508:	d223      	bcs.n	8003552 <pow+0x13a>
 800350a:	ee20 0b00 	vmul.f64	d0, d0, d0
 800350e:	2c00      	cmp	r4, #0
 8003510:	da12      	bge.n	8003538 <pow+0x120>
 8003512:	4639      	mov	r1, r7
 8003514:	f7ff ff4c 	bl	80033b0 <checkint>
 8003518:	2801      	cmp	r0, #1
 800351a:	d10d      	bne.n	8003538 <pow+0x120>
 800351c:	eeb1 0b40 	vneg.f64	d0, d0
 8003520:	ea58 0309 	orrs.w	r3, r8, r9
 8003524:	d10a      	bne.n	800353c <pow+0x124>
 8003526:	2f00      	cmp	r7, #0
 8003528:	dadf      	bge.n	80034ea <pow+0xd2>
 800352a:	b006      	add	sp, #24
 800352c:	ecbd 8b0a 	vpop	{d8-d12}
 8003530:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003534:	f7ff bef8 	b.w	8003328 <__math_divzero>
 8003538:	2000      	movs	r0, #0
 800353a:	e7f1      	b.n	8003520 <pow+0x108>
 800353c:	2f00      	cmp	r7, #0
 800353e:	dad4      	bge.n	80034ea <pow+0xd2>
 8003540:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003544:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8003548:	ed8d 7b00 	vstr	d7, [sp]
 800354c:	ed9d 0b00 	vldr	d0, [sp]
 8003550:	e7cb      	b.n	80034ea <pow+0xd2>
 8003552:	2c00      	cmp	r4, #0
 8003554:	da2c      	bge.n	80035b0 <pow+0x198>
 8003556:	4639      	mov	r1, r7
 8003558:	f7ff ff2a 	bl	80033b0 <checkint>
 800355c:	b930      	cbnz	r0, 800356c <pow+0x154>
 800355e:	b006      	add	sp, #24
 8003560:	ecbd 8b0a 	vpop	{d8-d12}
 8003564:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003568:	f7ff bef6 	b.w	8003358 <__math_invalid>
 800356c:	2801      	cmp	r0, #1
 800356e:	bf14      	ite	ne
 8003570:	2000      	movne	r0, #0
 8003572:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8003576:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800357a:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 800357e:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8003582:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8003586:	2b7f      	cmp	r3, #127	; 0x7f
 8003588:	d92d      	bls.n	80035e6 <pow+0x1ce>
 800358a:	4b67      	ldr	r3, [pc, #412]	; (8003728 <pow+0x310>)
 800358c:	2000      	movs	r0, #0
 800358e:	429c      	cmp	r4, r3
 8003590:	bf08      	it	eq
 8003592:	4286      	cmpeq	r6, r0
 8003594:	f43f af7d 	beq.w	8003492 <pow+0x7a>
 8003598:	f240 31bd 	movw	r1, #957	; 0x3bd
 800359c:	428a      	cmp	r2, r1
 800359e:	d80c      	bhi.n	80035ba <pow+0x1a2>
 80035a0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80035a4:	42b0      	cmp	r0, r6
 80035a6:	41a3      	sbcs	r3, r4
 80035a8:	d204      	bcs.n	80035b4 <pow+0x19c>
 80035aa:	ee31 0b00 	vadd.f64	d0, d1, d0
 80035ae:	e79c      	b.n	80034ea <pow+0xd2>
 80035b0:	2000      	movs	r0, #0
 80035b2:	e7e4      	b.n	800357e <pow+0x166>
 80035b4:	ee30 0b41 	vsub.f64	d0, d0, d1
 80035b8:	e797      	b.n	80034ea <pow+0xd2>
 80035ba:	2e01      	cmp	r6, #1
 80035bc:	eb74 0303 	sbcs.w	r3, r4, r3
 80035c0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80035c4:	bf34      	ite	cc
 80035c6:	2301      	movcc	r3, #1
 80035c8:	2300      	movcs	r3, #0
 80035ca:	4295      	cmp	r5, r2
 80035cc:	bf8c      	ite	hi
 80035ce:	2500      	movhi	r5, #0
 80035d0:	2501      	movls	r5, #1
 80035d2:	42ab      	cmp	r3, r5
 80035d4:	f000 809d 	beq.w	8003712 <pow+0x2fa>
 80035d8:	b006      	add	sp, #24
 80035da:	ecbd 8b0a 	vpop	{d8-d12}
 80035de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035e2:	f7ff be99 	b.w	8003318 <__math_oflow>
 80035e6:	f1bc 0f00 	cmp.w	ip, #0
 80035ea:	d10b      	bne.n	8003604 <pow+0x1ec>
 80035ec:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8003720 <pow+0x308>
 80035f0:	ee20 7b07 	vmul.f64	d7, d0, d7
 80035f4:	ec53 2b17 	vmov	r2, r3, d7
 80035f8:	ee17 6a10 	vmov	r6, s14
 80035fc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8003600:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8003604:	4b4c      	ldr	r3, [pc, #304]	; (8003738 <pow+0x320>)
 8003606:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800360a:	4423      	add	r3, r4
 800360c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8003610:	1519      	asrs	r1, r3, #20
 8003612:	0d1b      	lsrs	r3, r3, #20
 8003614:	051b      	lsls	r3, r3, #20
 8003616:	eba4 0903 	sub.w	r9, r4, r3
 800361a:	4b48      	ldr	r3, [pc, #288]	; (800373c <pow+0x324>)
 800361c:	ee04 1a10 	vmov	s8, r1
 8003620:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8003624:	f1b6 0800 	subs.w	r8, r6, #0
 8003628:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 800362c:	ec49 8b15 	vmov	d5, r8, r9
 8003630:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8003634:	eea5 6b07 	vfma.f64	d6, d5, d7
 8003638:	ed93 7b00 	vldr	d7, [r3]
 800363c:	ed93 5b02 	vldr	d5, [r3, #8]
 8003640:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8003644:	eea4 2b07 	vfma.f64	d2, d4, d7
 8003648:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 800364c:	ee36 ab02 	vadd.f64	d10, d6, d2
 8003650:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8003654:	eea4 7b05 	vfma.f64	d7, d4, d5
 8003658:	ed93 5b04 	vldr	d5, [r3, #16]
 800365c:	ee32 2b06 	vadd.f64	d2, d2, d6
 8003660:	ee37 7b02 	vadd.f64	d7, d7, d2
 8003664:	ee26 5b05 	vmul.f64	d5, d6, d5
 8003668:	ed93 4b08 	vldr	d4, [r3, #32]
 800366c:	ee26 0b05 	vmul.f64	d0, d6, d5
 8003670:	eeb0 9b40 	vmov.f64	d9, d0
 8003674:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8003678:	ed93 5b06 	vldr	d5, [r3, #24]
 800367c:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8003680:	ee26 bb00 	vmul.f64	d11, d6, d0
 8003684:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8003688:	eea6 5b04 	vfma.f64	d5, d6, d4
 800368c:	ee3a ab48 	vsub.f64	d10, d10, d8
 8003690:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8003694:	ee37 9b09 	vadd.f64	d9, d7, d9
 8003698:	ee3a ab00 	vadd.f64	d10, d10, d0
 800369c:	eea6 4b03 	vfma.f64	d4, d6, d3
 80036a0:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 80036a4:	ee39 ab0a 	vadd.f64	d10, d9, d10
 80036a8:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 80036ac:	eea6 3b0c 	vfma.f64	d3, d6, d12
 80036b0:	eea0 4b03 	vfma.f64	d4, d0, d3
 80036b4:	eea0 5b04 	vfma.f64	d5, d0, d4
 80036b8:	eeab ab05 	vfma.f64	d10, d11, d5
 80036bc:	ee38 6b0a 	vadd.f64	d6, d8, d10
 80036c0:	ee21 7b06 	vmul.f64	d7, d1, d6
 80036c4:	ee17 3a90 	vmov	r3, s15
 80036c8:	eeb0 5b47 	vmov.f64	d5, d7
 80036cc:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80036d0:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 80036d4:	18b2      	adds	r2, r6, r2
 80036d6:	2a3e      	cmp	r2, #62	; 0x3e
 80036d8:	ee91 5b06 	vfnms.f64	d5, d1, d6
 80036dc:	ee38 8b46 	vsub.f64	d8, d8, d6
 80036e0:	ee38 ab0a 	vadd.f64	d10, d8, d10
 80036e4:	eea1 5b0a 	vfma.f64	d5, d1, d10
 80036e8:	d92b      	bls.n	8003742 <pow+0x32a>
 80036ea:	2a00      	cmp	r2, #0
 80036ec:	da0b      	bge.n	8003706 <pow+0x2ee>
 80036ee:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80036f2:	ee37 0b00 	vadd.f64	d0, d7, d0
 80036f6:	2800      	cmp	r0, #0
 80036f8:	f43f aef7 	beq.w	80034ea <pow+0xd2>
 80036fc:	eeb1 0b40 	vneg.f64	d0, d0
 8003700:	e6f3      	b.n	80034ea <pow+0xd2>
 8003702:	2000      	movs	r0, #0
 8003704:	e77e      	b.n	8003604 <pow+0x1ec>
 8003706:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 800370a:	d919      	bls.n	8003740 <pow+0x328>
 800370c:	2b00      	cmp	r3, #0
 800370e:	f6bf af63 	bge.w	80035d8 <pow+0x1c0>
 8003712:	b006      	add	sp, #24
 8003714:	ecbd 8b0a 	vpop	{d8-d12}
 8003718:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800371c:	f7ff bdf4 	b.w	8003308 <__math_uflow>
 8003720:	00000000 	.word	0x00000000
 8003724:	43300000 	.word	0x43300000
 8003728:	3ff00000 	.word	0x3ff00000
 800372c:	fff00000 	.word	0xfff00000
 8003730:	ffe00000 	.word	0xffe00000
 8003734:	7fe00000 	.word	0x7fe00000
 8003738:	c0196aab 	.word	0xc0196aab
 800373c:	08004190 	.word	0x08004190
 8003740:	2600      	movs	r6, #0
 8003742:	495d      	ldr	r1, [pc, #372]	; (80038b8 <pow+0x4a0>)
 8003744:	ed91 4b02 	vldr	d4, [r1, #8]
 8003748:	ed91 3b00 	vldr	d3, [r1]
 800374c:	eeb0 6b44 	vmov.f64	d6, d4
 8003750:	eea7 6b03 	vfma.f64	d6, d7, d3
 8003754:	ee16 5a10 	vmov	r5, s12
 8003758:	ee36 6b44 	vsub.f64	d6, d6, d4
 800375c:	ed91 4b04 	vldr	d4, [r1, #16]
 8003760:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8003764:	eea6 7b04 	vfma.f64	d7, d6, d4
 8003768:	eeb0 0b47 	vmov.f64	d0, d7
 800376c:	ed91 7b06 	vldr	d7, [r1, #24]
 8003770:	18dc      	adds	r4, r3, r3
 8003772:	f104 030f 	add.w	r3, r4, #15
 8003776:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800377a:	eea6 0b07 	vfma.f64	d0, d6, d7
 800377e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8003782:	ee35 0b00 	vadd.f64	d0, d5, d0
 8003786:	ee20 6b00 	vmul.f64	d6, d0, d0
 800378a:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 800378e:	ed91 5b08 	vldr	d5, [r1, #32]
 8003792:	ee30 7b07 	vadd.f64	d7, d0, d7
 8003796:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800379a:	eea0 5b04 	vfma.f64	d5, d0, d4
 800379e:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 80037a2:	eea6 7b05 	vfma.f64	d7, d6, d5
 80037a6:	ee26 6b06 	vmul.f64	d6, d6, d6
 80037aa:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 80037ae:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 80037b2:	f8d2 e004 	ldr.w	lr, [r2, #4]
 80037b6:	eea0 5b04 	vfma.f64	d5, d0, d4
 80037ba:	1940      	adds	r0, r0, r5
 80037bc:	2700      	movs	r7, #0
 80037be:	eb17 020c 	adds.w	r2, r7, ip
 80037c2:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 80037c6:	eea6 7b05 	vfma.f64	d7, d6, d5
 80037ca:	2e00      	cmp	r6, #0
 80037cc:	d15f      	bne.n	800388e <pow+0x476>
 80037ce:	42bd      	cmp	r5, r7
 80037d0:	db13      	blt.n	80037fa <pow+0x3e2>
 80037d2:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 80037d6:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 80037da:	4610      	mov	r0, r2
 80037dc:	ec41 0b10 	vmov	d0, r0, r1
 80037e0:	eea7 0b00 	vfma.f64	d0, d7, d0
 80037e4:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80038a0 <pow+0x488>
 80037e8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80037ec:	b006      	add	sp, #24
 80037ee:	ecbd 8b0a 	vpop	{d8-d12}
 80037f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037f6:	f7ff bdc7 	b.w	8003388 <__math_check_oflow>
 80037fa:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80037fe:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8003802:	4610      	mov	r0, r2
 8003804:	ec41 0b15 	vmov	d5, r0, r1
 8003808:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800380c:	ee27 6b05 	vmul.f64	d6, d7, d5
 8003810:	ee35 7b06 	vadd.f64	d7, d5, d6
 8003814:	eeb0 3bc7 	vabs.f64	d3, d7
 8003818:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800381c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003820:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80038a8 <pow+0x490>
 8003824:	d52a      	bpl.n	800387c <pow+0x464>
 8003826:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800382a:	ee35 5b47 	vsub.f64	d5, d5, d7
 800382e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003832:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8003836:	ee35 6b06 	vadd.f64	d6, d5, d6
 800383a:	bf48      	it	mi
 800383c:	eeb0 4b43 	vmovmi.f64	d4, d3
 8003840:	ee37 3b04 	vadd.f64	d3, d7, d4
 8003844:	ee34 5b43 	vsub.f64	d5, d4, d3
 8003848:	ee35 7b07 	vadd.f64	d7, d5, d7
 800384c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003850:	ee37 7b03 	vadd.f64	d7, d7, d3
 8003854:	ee37 7b44 	vsub.f64	d7, d7, d4
 8003858:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800385c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003860:	d104      	bne.n	800386c <pow+0x454>
 8003862:	4632      	mov	r2, r6
 8003864:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8003868:	ec43 2b17 	vmov	d7, r2, r3
 800386c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003870:	ed9d 6b02 	vldr	d6, [sp, #8]
 8003874:	ee26 6b00 	vmul.f64	d6, d6, d0
 8003878:	ed8d 6b04 	vstr	d6, [sp, #16]
 800387c:	ee27 0b00 	vmul.f64	d0, d7, d0
 8003880:	b006      	add	sp, #24
 8003882:	ecbd 8b0a 	vpop	{d8-d12}
 8003886:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800388a:	f7ff bd74 	b.w	8003376 <__math_check_uflow>
 800388e:	ec43 2b10 	vmov	d0, r2, r3
 8003892:	eea7 0b00 	vfma.f64	d0, d7, d0
 8003896:	e628      	b.n	80034ea <pow+0xd2>
 8003898:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80038b0 <pow+0x498>
 800389c:	e625      	b.n	80034ea <pow+0xd2>
 800389e:	bf00      	nop
 80038a0:	00000000 	.word	0x00000000
 80038a4:	7f000000 	.word	0x7f000000
 80038a8:	00000000 	.word	0x00000000
 80038ac:	00100000 	.word	0x00100000
	...
 80038b8:	080051d8 	.word	0x080051d8

080038bc <_init>:
 80038bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038be:	bf00      	nop
 80038c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038c2:	bc08      	pop	{r3}
 80038c4:	469e      	mov	lr, r3
 80038c6:	4770      	bx	lr

080038c8 <_fini>:
 80038c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ca:	bf00      	nop
 80038cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ce:	bc08      	pop	{r3}
 80038d0:	469e      	mov	lr, r3
 80038d2:	4770      	bx	lr
